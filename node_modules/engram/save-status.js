#!/usr/bin/env node
"use strict";

var is = require("is");
var log = require("engram/logger");

var Result = require("engram/result").Result;
var Ok = require("engram/result").Ok;
var Err = require("engram/result").Err;

var requestURL = require("engram/request-url");
var database = require("engram/database");
var STATSBUS = require("engram/stats");

/*
	findUnresolvedURL(callback)

	select the URLS that don't have a status code.
*/

var findUnresolvedURL = function (callback) {

	var sql = "\n\tSELECT * FROM url\n\n\tWHERE url.status_code is NULL\n\n\tORDER BY RANDOM()\n\tLIMIT 1;\n\t";

	database["do"](function (db, callback) {

		db.all(sql, function (err, rows) {
			err ? callback(Err(err)) : callback(Ok(rows));
		});
	}, callback);
};

/*
	updateStatus(url, statusCode, callback)

	set the status code for a URL.

*/

var updateStatus = function (url, statusCode, callback) {

	updateStatus.precond(url, statusCode, callback);

	var sql = "UPDATE url SET status_code=$statusCode WHERE url = $url";

	database["do"](function (db, callback) {

		db.run(sql, {
			$url: url,
			$statusCode: statusCode
		}, function (err) {
			err ? callback(Err(err)) : callback(Ok(url));
		});
	}, callback);
};

updateStatus.precond = function (url, statusCode, callback) {

	is.always.string(url);
};

/*
	saveStatus(reporter, url)

	request a URL, and save it's to the database.
*/

var saveStatus = function (reporter, urls) {

	saveStatus.precond(reporter, urls);

	var onURL = function (reqResult) {

		onURL.precond(reqResult);

		reqResult.onErr(function (errData) {
			reporter(Err(errData));
		});

		reqResult.onOk(function (_ref) {
			var res = _ref.res;
			var body = _ref.body;

			updateStatus(urls[0].url, res.statusCode, function (result) {
				reporter(Ok(urls[0].url));
			});
		});
	};

	onURL.precond = function (urlsResult) {
		is.always.object(urlsResult);
	};

	urls.length === 0 ? reporter(Ok([])) : requestURL(urls[0].url, {}, onURL);
};

saveStatus.precond = function (reporter, urls) {
	is.always.array(urls);
};

module.exports = saveStatus;