#!/usr/bin/env node


"use strict";

var log = require('engram/es5/logging/logger');

var Result = require('engram/es5/result').Result;
var Ok = require('engram/es5/result').Ok;

var parseContentType = require('content-type').parse;
var contentTypes = require('engram/es5/content-types');

var $ = require('cheerio');
var path = require('path');
var URL = require('url');

var trimTitle = function trimTitle(uri, title) {

	// -- match spaces, then one character, then a space, then any character not in the list.
	var delimiter = /[ \t]+[||\-—»][ \t]+[^||\-—»]+$/g;
	return title.replace(delimiter, '');
};

var extractResourceName = function extractResourceName(uri) {
	return path.basename(URL.parse(uri).pathname);
};

var chooseBestTitle = function chooseBestTitle(url, titles) {

	var fallback = {
		tag: undefined,
		text: URL.parse(url).hostname,
		'font-size': -1
	};

	return trimTitle(url, titles.concat([fallback]).filter(function (title) {
		return title.text.length > 0;
	})[0].text);
};

var extractTitle = function extractTitle(_ref, callback) {
	var url = _ref.url;
	var res = _ref.res;
	var body = _ref.body;

	var contentType = res.headers['content-type'] || 'text/html';
	var parsed = Result.of(function () {
		return parseContentType(contentType);
	});

	parsed.onErr(function (err) {

		log.global.warn({
			contentType: contentType, err: err, id: res.id, url: url
		}, 'content-type parsing failed.');
	});

	parsed.onOk(function (contentType) {

		if (contentTypes.isHTML(contentType)) {

			extractTitle.html({ url: url, res: res, body: body }, callback);
		} else if (contentTypes.isPDF(contentType)) {

			extractTitle.pdf({ url: url, res: res, body: body }, callback);
		} else {

			callback(Ok(extractResourceName(url)));
		}
	});
};

extractTitle.html = function (_ref2, callback) {
	var url = _ref2.url;
	var res = _ref2.res;
	var body = _ref2.body;

	var $html = $(res.body.toString('utf8'));

	var extractTagInfo = function extractTagInfo(tagName) {

		var $tag = $html.find(tagName);

		if ($tag.length === 0) {
			return [];
		} else if ($tag.length === 1) {

			return [{
				tag: tagName,
				text: $tag.text().trim(),
				'font-size': -1
			}];
		} else {

			return $tag.map(function (_ref3) {
				var ith = _ref3.ith;
				var elem = _ref3.elem;

				return {
					tag: tagName,
					text: $(elem).text().trim(),
					'font-size': -1
				};
			}).get();
		}
	};

	var titles = [];['title', 'h1'].forEach(function (tagName) {
		titles = titles.concat(extractTagInfo(tagName));
	});

	callback(Ok(chooseBestTitle(url, titles)));
};

extractTitle.pdf = function (_ref4, callback) {
	var url = _ref4.url;
	var res = _ref4.res;
	var body = _ref4.body;
};

module.exports = extractTitle;
