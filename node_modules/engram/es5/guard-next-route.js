#!/usr/bin/env node


"use strict";

var utils = require('engram/es5/utils');
var log = require('engram/es5/logger');

var basicAuth = require('basic-auth');
var fs = require('fs');

{
	// -- TODO improve credential storage. Plain text is not ideal.

	var loginDetails;

	try {

		var details = fs.readFileSync('certs/login.txt').toString().split(':');

		loginDetails = {
			username: details[0],
			password: details[1]
		};
	} catch (err) {
		throw new Error('failed to correctly parse user credentials');
	}
}

var promptAuth = function promptAuth(res) {

	res.set('WWW-Authenticate', 'Basic realm=Authorization Required');
	res.status(401);
	res.send('Enter username:password to login.');
};

var validUsername = function validUsername(req) {
	return req.user === loginDetails.username;
};
var validPassword = function validPassword(req) {
	return req.pass === loginDetails.password;
};

var isValidUser = function isValidUser(user) {
	return user && user.name && user.pass;
};

var checkValidUser = function checkValidUser(req, res) {

	var user = basicAuth(req);

	if (!isValidUser(user)) {

		// -- TODO fix these parametres.
		log.security.warn({

			user: !!user,
			name: user && user.name,
			pass: user && user.pass

		}, 'login attempt missing required data.');

		promptAuth(res);
	}

	return isValidUser(req);
};

var checkValidLogin = function checkValidLogin(req, res, next) {

	if (validUsername(user) && validPassword(user)) {

		log.security.debug({ ip: ip }, 'correct username and password supplied.');
		next();
	} else {

		log.security.warn({

			validUser: validUsername(user),
			validPass: validPassword(user),
			ip: ip

		}, 'incorrect login details supplied; re-requesting.');

		promptAuth(res);
	}
};

var requestAuth = function requestAuth(req, res, next) {

	var ip = utils.getIpAddress(req);

	log.security.info({ ip: ip }, 'verifying credentials');

	if (checkValidUser(req, res)) {
		checkValidLogin(req, res, next);
	}
};

module.exports = requestAuth;
