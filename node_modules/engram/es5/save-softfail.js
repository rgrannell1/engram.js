#!/usr/bin/env node


"use strict";

var Ok = require('engram/es5/result').Ok;
var Err = require('engram/es5/result').Err;

var requestURL = require('engram/es5/request-url');
var database = require('engram/es5/database');

/*
	updateSoftFail(url, isSoftFailer, callback)

	set the soft-fail status for a URL.
*/

var updateSoftFail = function updateSoftFail(url, isSoftFailer, callback) {

	var sql = 'UPDATE url SET is_soft_failer=$isSoftFailer WHERE url.url = $url';

	database.serialise(function (db) {

		db.run(sql, {
			$url: url,
			$isSoftFailer: isSoftFailer
		}, function (err) {
			err ? callback(Err(err)) : callback(Ok(url));
		});
	});
};

/*
	isSoftFailer(url, callback)

	does a URL fail with a 200-status? The algorithm used is
	described "Towards an understanding of the web decay."

	* if it succeeds, the page may not be dead.
	* if it redirects, follow ten non-looping steps before declaring dead.
	* if the page succeeds:
	      > create several fake URLs from the parent url.
	      > if (after redirecting) the random urls fail, our URL is valid! Otherwise, soft-failer.
	      > if random & ours redirect the same number of hops, soft failer! If ours if different,
	      ours might be alive.
	      > if, upon shingling, the contents out our URL is the same as outs, probably a soft-failure.
	      > can also look for '404' or 'not found in title', false positive.

*/

var isSoftFailer = function isSoftFailer(_ref, callback) {
	var url = _ref.url;
	var res = _ref.res;
	var body = _ref.body;

	// -- TODO

	requestURL(url, { encoding: null }, function (reqResult) {

		reqResult.onErr(function (err) {
			callback(Err(err));
		});

		reqResult.onOk(function (_ref2) {
			var res = _ref2.res;
			var body = _ref2.body;

			callback(Ok(false)); // -- TODO!
		});
	});
};

var saveSoftFailStatus = function saveSoftFailStatus(_ref3, reporter) {
	var url = _ref3.url;
	var res = _ref3.res;
	var body = _ref3.body;

	isSoftFailer({ url: url, res: res, body: body }, function (statusResult) {

		statusResult.onErr(function (err) {
			reporter(Err(err));
		});

		statusResult.onOk(function (isSoftFailer) {
			updateSoftFail(url, isSoftFailer, reporter);
		});
	});
};

module.exports = saveSoftFailStatus;
