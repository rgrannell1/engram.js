#!/usr/bin/env node
"use strict";

var log = require("engram/es5/logger");

var is = require("is");
var http = require("http");
var express = require("express");

var Result = require("engram/es5/result").Result;
var Ok = require("engram/es5/result").Ok;
var Err = require("engram/es5/result").Err;

var routes = require("engram/es5/routes");
var database = require("engram/es5/database");

var createTables = require("engram/es5/create-tables");

var daemonStatus = require("engram/es5/daemon-status");
var daemonSoftFail = require("engram/es5/daemon-softfail");
var daemonTitle = require("engram/es5/daemon-title");
var daemonArchive = require("engram/es5/daemon-archive");

var startDaemons = require("engram/es5/start-daemons");
var exitHandler = require("engram/es5/exit-handler");

var startServer = function (app, port, start, callback) {

	callback(Result.of(function () {

		process.on("uncaughtException", exitHandler.bind({}, true));

		app.use("/api", routes.api).use("/", routes.app).use("/", routes.save).on("error", function (err) {

			var handled = {
				EADDRINUSE: "port " + port + " currently in use"
			};

			handled.hasOwnProperty(err.code) ? log.global.error(handled[err.code]) : log.global.error(err.toString());
		});

		if (start) {

			app.listen(port, "localhost", function () {
				log.global.info("engram listening on port " + port);
			});
		}
	}));
};

/*
	the processes to keep running indefinitely. A single moniter checks each of these
	processes is responding. Each moniter manages its own task lifespans, and logging.

	current tasks:

*/

var daemons = {};

var engram = function (_ref) {
	var port = _ref.port;
	var dbpath = _ref.dbpath;
	var start = _ref.start;

	engram.precond(port, dbpath);

	start = is.boolean(start) ? start : true;

	global.DATABASE = dbpath;

	var app = express();

	createTables(function (result) {

		// -- fatal error.
		if (result && result.isErr) {
			throw result.fromErr;
		}

		return startServer(app, port, start, function (result) {

			// -- fatal error.
			if (result && result.isErr) {
				throw result.fromErr;
			}

			startDaemons(daemons);
		});
	});

	return app;
};

engram.precond = function (port, dbpath) {
	is.always.string(dbpath);
};

module.exports = engram;

//	status:   daemonStatus,
//	softFail: daemonSoftFail,
//	title:    daemonTitle,
//	archive:  daemonArchive