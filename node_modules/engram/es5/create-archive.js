#!/usr/bin/env node
"use strict";

var log = require("engram/es5/logger");
var Err = require("engram/es5/result").Err;

var ctype = require("content-type");
var contentTypes = require("engram/es5/content-types");

var requestURL = require("engram/es5/request-url");

var createArchive = function (url, callback) {

	requestURL(url, { encoding: null }, function (resResult) {

		resResult.onErr(function (err) {
			callback(Err(err));
		});

		resResult.onOk(function (_ref) {
			var res = _ref.res;
			var body = _ref.body;

			var contentType = res.headers["content-type"] || "text/html";
			var parsed = Result.of(function () {
				return ctype.parse(contentType);
			});

			parsed.onErr(function (err) {

				log.global.error({
					contentType: contentType,
					message: err.message,
					stack: err.stack,
					url: url
				}, "content-type parsing failed.");

				callback(Err(err));
			});

			parsed.onOk(function (contentType) {

				contentTypes.isHTML(contentType) ? createArchive.html(url, body, contentType, callback) : createArchive.fallback(url, body, contentType, callback);
			});
		});
	});
};

createArchive.html = function (url, body, contentType, callback) {

	createArchive.html.precond(url, body, contentType, callback);

	var content = new Buffer("<h1>hello!</h1>", "binary");

	callback(Ok({
		content: content,
		contentType: ctype.format(contentType)
	}));
};

createArchive.html.precond = function (url, body, contentType, callback) {

	is.always.string(url);
	is.always.object(body);
	is.always.object(contentType);
};

createArchive.fallback = function (url, body, contentType, callback) {

	createArchive.fallback.precond(url, body, contentType, callback);

	callback(Ok({
		content: body,
		contentType: ctype.format(contentType)
	}));
};

createArchive.fallback.precond = function (url, body, contentType, callback) {

	is.always.string(url);
	is.always.object(body);
	is.always.object(contentType);
};

module.exports = createArchive;