#!/usr/bin/env node


"use strict";

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var log = require('engram/es5/logging/logger');
var constants = require('engram/es5/constants');
var message = require('engram/es5/message');
var is = require('is');

var Result = (function () {
	function Result() {
		_classCallCheck(this, Result);
	}

	_createClass(Result, [{
		key: 'fromOk',
		value: function fromOk() {

			if (Result.isOk(this)) {
				return this.value;
			} else {
				throw TypeError('attempted to extract');
			}
		}
	}, {
		key: 'fromErr',
		value: function fromErr() {

			if (Result.isErr(this)) {
				return this.value;
			} else {
				throw TypeError('');
			}
		}
	}], [{
		key: 'of',
		value: function of(fn) {
			return Ok(undefined).then(function () {
				return fn();
			});
		}
	}, {
		key: 'isResult',
		value: function isResult(value) {
			return is.object(value) && (value.isErr === true || value.isOk === true);
		}
	}, {
		key: 'isErr',
		value: function isErr(value) {
			return is.object(value) && value.isErr === true;
		}
	}, {
		key: 'isOk',
		value: function isOk(value) {
			return is.object(value) && value.isOk === true;
		}
	}]);

	return Result;
})();

var _Err = (function (_Result) {
	_inherits(_Err, _Result);

	function _Err(value) {
		_classCallCheck(this, _Err);

		_get(Object.getPrototypeOf(_Err.prototype), 'constructor', this).call(this);

		var topic = is.error(value) ? 'ERR_CONSTRUCTED_ERROR' : 'ERR_CONSTRUCTED_NORMAL';

		var data = is.error(value) ? { stack: value.stack, message: value.message } : value;

		constants.BUS.emit(message[topic], data);

		this.value = Result.isResult(value) ? value.value : value;

		this.isErr = true;
		this.isOk = false;

		return this;
	}

	_createClass(_Err, [{
		key: 'then',
		value: function then(fn) {
			return this;
		}
	}, {
		key: 'tap',
		value: function tap(fn) {
			return this;
		}
	}, {
		key: 'onErr',
		value: function onErr(fn) {
			fn(this.value);
			return this;
		}
	}, {
		key: 'onOk',
		value: function onOk(fn) {
			return this;
		}
	}, {
		key: 'productOf',
		value: function productOf() {
			return this;
		}
	}, {
		key: 'cross',
		value: function cross(results) {
			return this;
		}
	}]);

	return _Err;
})(Result);

var _Ok = (function (_Result2) {
	_inherits(_Ok, _Result2);

	function _Ok(value) {
		_classCallCheck(this, _Ok);

		_get(Object.getPrototypeOf(_Ok.prototype), 'constructor', this).call(this);

		this.value = Result.isResult(value) ? value.value : value;

		this.isErr = false;
		this.isOk = true;

		return this;
	}

	_createClass(_Ok, [{
		key: 'onErr',
		value: function onErr(fn) {
			return this;
		}
	}, {
		key: 'onOk',
		value: function onOk(fn) {
			fn(this.value);
			return this;
		}
	}, {
		key: 'then',
		value: function then(fn) {

			try {

				var result = fn(this.value);
				return Result.isErr(result) ? result : Ok(result);
			} catch (err) {
				return Err(err);
			}
		}
	}, {
		key: 'tap',
		value: function tap(fn) {

			var result = this.then(fn);
			return Result.isErr(result) ? result : this;
		}
	}, {
		key: 'cross',
		value: function cross(results) {

			var values = [this.value];

			for (var ith = 0; ith < results.length; ++ith) {

				if (!Result.isResult(results[ith])) {
					throw TypeError('');
				}

				if (results[ith].isOk) {
					values.push(results[ith].value);
				} else {
					return results[ith];
				}
			}

			return Ok(values);
		}
	}, {
		key: 'productOf',
		value: function productOf() {

			var values = [];
			var innerValues = this.value;

			for (var ith = 0; ith < innerValues.length; ++ith) {

				if (!Result.isResult(innerValues[ith])) {
					throw TypeError('not a result: ' + JSON.stringify(innerValues[ith]));
				}

				if (innerValues[ith].isOk) {
					values.push(innerValues[ith].value);
				} else {
					return innerValues[ith];
				}
			}

			return Ok(values);
		}
	}]);

	return _Ok;
})(Result)

// -- to get around the constructor without new problem
;

var Ok = function Ok(value) {
	return new _Ok(value);
};

var Err = function Err(value) {
	return new _Err(value);
};

module.exports = {
	Err: Err,
	Ok: Ok,
	Result: Result
};
