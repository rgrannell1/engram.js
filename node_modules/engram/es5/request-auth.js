#!/usr/bin/env node


"use strict";

var utils = require('engram/es5/utils');
var constants = require('engram/es5/constants');
var log = require('engram/es5/logger');

var basicAuth = require('basic-auth');
var fs = require('fs');

{
	// -- TODO improve credential storage. Plain text is not ideal.

	var loginDetails;

	try {

		var details = fs.readFileSync('certs/login.txt').toString().split(':');

		loginDetails = {
			username: details[0],
			password: details[1]
		};
	} catch (err) {
		throw new Error('failed to correctly parse user credentials');
	}
}

var existing = {
	user: function user(_user) {
		return _user && _user.name === loginDetails.username;
	},
	pass: function pass(user) {
		return user && user.pass === loginDetails.password;
	}
};

var askForAuth = function askForAuth(res) {

	res.set('WWW-Authenticate', 'Basic realm="Engram Authorisation"');
	res.status(401);
	res.send('Enter username:password to login.');
};

{
	var getInvalidCount;

	(function () {
		var counts = {};

		getInvalidCount = function getInvalidCount(ip) {

			counts[ip] = counts.hasOwnProperty(ip) ? counts[ip] + 1 : 0;

			return counts[ip];
		};
	})();
}

var checkValidUser = function checkValidUser(req, res) {

	var user = basicAuth(req);

	if (user && user.name && user.pass) {

		return true;
	} else {

		// -- TODO fix these parametres.
		log.security.warn({

			user: !!user,
			name: !!(user && user.name),
			pass: !!(user && user.pass)

		}, 'login attempt missing required data; Re-requesting.');

		setTimeout(askForAuth, constants.REAUTH_TIMEOUT, res);

		return false;
	}
};

var checkValidLogin = function checkValidLogin(req, res, next) {

	var user = basicAuth(req);
	var ipResult = utils.getIpAddress(req);

	ipResult.onErr(function (err) {
		log.security.error({ err: err }, 'failed to fetch user IP.');
	});

	ipResult.onOk(function (ip) {

		var foundUsername = existing.user(user);
		var foundPassword = existing.pass(user);

		if (foundUsername && foundPassword) {

			log.security.debug({

				ip: ip, invalidTries: getInvalidCount(ip)

			}, 'correct username and password supplied.');

			next();
		} else {

			log.security.warn({

				validUser: existing.user(user),
				validPass: existing.pass(user),
				invalidTries: getInvalidCount(ip),
				ip: ip

			}, 'incorrect login details supplied; re-requesting.');

			setTimeout(askForAuth, constants.REAUTH_TIMEOUT, res);
		}
	});
};

var requestAuth = function requestAuth(req, res, next) {

	var ipResult = utils.getIpAddress(req);

	ipResult.onOk(function (ip) {

		log.security.info({
			ip: ip,
			invalidTries: getInvalidCount(ip)
		}, 'verifying credentials.');

		if (checkValidUser(req, res)) {
			checkValidLogin(req, res, next);
		}
	});
};

module.exports = requestAuth;
