#!/usr/bin/env node


"use strict";

var is = require('is');
var log = require('engram/es5/logger');
var utils = require('engram/es5/utils');

var constants = require('engram/es5/constants');
var message = require('engram/es5/message');

{
	(function () {
		var amount = 0;
		var startTime = undefined;
		var lastTime = undefined;

		constants.BUS.on(message.URL_RESOLVED, function () {

			if (is.undefined(startTime)) {
				startTime = new Date().getTime();
			}

			lastTime = new Date().getTime();
			amount++;

			var rate = amount / ((lastTime - startTime) / 1000);

			if (isFinite(rate)) {
				log.stats.info({ value: rate }, 'μ bookmarks per second.');
			}
		});
	})();
}

{
	(function () {

		var totalTime = 0;
		var amount = 0;

		constants.BUS.on(message.URL_RESOLVED, function (urlResult) {

			urlResult.onOk(function (_ref) {
				var res = _ref.res;
				var body = _ref.body;

				amount++;
				totalTime += res.requestTime || 0;
			});

			var averageTime = Math.round(totalTime / amount, 1);

			log.stats.info({ value: averageTime }, 'μ seconds per request.');
		});
	})();
}

{
	(function () {

		var failed = 0;
		var succeeded = 0;

		constants.BUS.on(message.URL_RESOLVED, function (urlResult) {

			urlResult.onOk(function () {
				return ++succeeded;
			});
			urlResult.onErr(function () {
				return ++failed;
			});

			var averageRate = Math.round(succeeded / (failed + succeeded), 1);

			log.stats.info({ failed: failed, succeeded: succeeded, value: averageRate }, 'μ url success rate.');
		});
	})();
}

// -- security-related statistics

{

	var ips = [];

	constants.BUS.on(message.USER_RESOLVED, function (req) {

		var ipResult = utils.getIpAddress(req);

		ipResult.onOk(function (ip) {

			if (ips.indexOf(ip) === -1) {
				ips.push(ip);
			}

			log.stats.info({ ips: ips }, 'served addresses.');
		});

		// -- probably never going to be called.
		ipResult.onErr(function (err) {

			log.global.error({
				message: err.message,
				stack: err.stack
			}, 'could not extract ip address.');
		});
	});
}
