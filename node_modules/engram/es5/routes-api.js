#!/usr/bin/env node


"use strict";

var log = require('engram/es5/logger');

var Ok = require('engram/es5/result').Ok;

var express = require('express');
var bodyParser = require('body-parser');

var fetchBookmarks = require('engram/es5/fetch-bookmarks');
var fetchBookmark = require('engram/es5/fetch-bookmark');

var deleteBookmark = require('engram/es5/delete-bookmark');
var importBookmarks = require('engram/es5/import-bookmarks');

var parse = require('engram/es5/parse');

var api = express.Router();

var routes = {
	get: {},
	post: {},
	'delete': {}
};

routes.get['/bookmarks'] = function (req, res) {

	log.global.info({
		reqID: req.id
	}, 'GET /bookmark');

	var maxIdResult = parse.id(req.query.maxID);
	var amountResult = parse.amount(req.query.amount);

	Ok([maxIdResult, amountResult]).productOf().then(function (pair) {

		fetchBookmarks(pair[0], pair[1], res);
	});
};

routes.get['/bookmarks/:id'] = function (req, res) {

	log.global.info({
		reqID: req.id
	}, 'GET /bookmarks/' + req.params.id);

	var idResult = parse.id(req.params.id);

	idResult.onErr(function (_ref) {
		var message = _ref.message;
		var code = _ref.code;

		res.sendStatus(code);
	});

	idResult.onOk(fetchBookmark.bind({}, res));
};

routes.get['/bookmarks/all'] = function (req, res) {
	res.redirect('/bookmarks?maxID=' + 1000 * 1000 + '&amount=' + 1000 * 1000);
};

routes.post['/import'] = function (req, res) {

	log.global.info({
		reqID: req.id
	}, 'POST /import');

	var importResult = parse.bookmarks(req.body);

	importResult.onErr(function (_ref2) {
		var message = _ref2.message;
		var code = _ref2.code;

		log.global.error({ message: message, code: code }, 'import failed.');

		res.status(code);
		res.end();
	});

	importResult.onOk(function (bookmarks) {
		importBookmarks(bookmarks, res);
	});
};

routes['delete']['/bookmarks/:id'] = function (req, res) {

	log.global.info({
		reqID: req.id
	}, 'DELETE /api/bookmarks/' + req.params.id);

	deleteBookmark(res, req.params.id);
};

routes.get['/archive/:id'] = function (req, res) {

	log.global.info({
		reqID: req.id
	}, 'GET /archive/' + req.params.id);

	var idResult = parse.id(req.params.id);

	idResult.onErr(function (_ref3) {
		var message = _ref3.message;
		var code = _ref3.code;

		res.sendStatus(code);
	});

	idResult.onOk(fetchArchive.bind({}, res));
};

api.get('/bookmarks', routes.get['/bookmarks']);
api.get('/bookmarks/all', routes.get['/bookmarks/all']);
api.get('/bookmarks/:id', routes.get['/bookmarks/:id']);
api.get('/archive/:id', routes.get['/archive/:id']);

api['delete']('/bookmarks/:id', routes['delete']['/bookmarks/:id']);

api.use(bodyParser.json({ limit: '100mb' }));

api.post('/import', routes.post['/import']);

module.exports = api;
