#!/usr/bin/env node


"use strict";

var is = require('is');
var Ok = require('engram/es5/result').Ok;
var Err = require('engram/es5/result').Err;

var database = require('engram/es5/database');
var constants = require('engram/es5/constants');
var message = require('engram/es5/message');

var saveArchive = require('engram/es5/save-archive');

/*
	findUnresolvedURL(callback)

	select the URLS that don't have a status code.
*/

var findUnarchivedURL = function findUnarchivedURL(callback) {

	var sql = '\n\tSELECT url FROM archive\n\tWHERE content is NULL or content_type is NULL\n\n\tORDER BY RANDOM()\n\tLIMIT 1;\n\t';

	database.serialise(function (db) {

		db.all(sql, function (err, rows) {
			err ? callback(Err(err)) : callback(Ok(rows));
		});
	});
};

/*
	save a single unresolved URL to the database before reporting.
*/

var job = function job(reporter) {

	var onURL = function onURL(urlResult) {

		urlResult.onErr(function (errData) {
			reporter(Err(errData));
		});

		urlResult.onOk(saveArchive.bind({}, reporter));
	};

	onURL.precond = function (urlResult) {
		is.always.object(urlResult);
	};

	findUnarchivedURL(onURL);
};

/*
	report whether a url was found or not.
*/

var reporter = function reporter(urlResult) {

	reporter.precond(urlResult);

	constants.BUS.emit(message.ARCHIVE_FINISHED, urlResult);
};

reporter.precond = function (urlResult) {
	is.always.object(urlResult);
};

module.exports = {
	reporter: reporter,
	job: job,
	interval: 15 * constants.SECOND_IN_MS
};
