#!/usr/bin/env node

"use strict"




var log                  = require('engram/es6-new/logging/logger')
var Result               = require('engram/es6-new/commons/result').Result
var Ok                   = require('engram/es6-new/commons/result').Ok
var Err                  = require('engram/es6-new/commons/result').Err

var startApp             = require('engram/es6-new/app/start-app')
var createTLSCredentials = require('engram/es6-new/security/create-tls-credentials')
var loadDatabase         = require('engram/es6-new/persistance/load-database')





var callbacks = { }

callbacks.wipeData = wipeResult => {

	wipeResult.onOk(( ) => {
		log.global.info('successfully cleared database/logs.')
	})

	wipeResult.onErr(( ) => {
		log.global.info('failed to wipe database/logs.')
	})

}

callbacks.createTLSCredentials = createResult => {

	createResult.onErr(err => {
		log.global.error({err}, 'failed to create https certificates.')
	})

	createResult.onOk(( ) => {
		log.security.error({ }, 'ensured https certificates exist.')
	})

}

callbacks.ensureTLSCertificatesExist = ensureResult => {

	ensureResult.onErr(err => {
		log.global.error({err}, 'failed to ensure https certificates exist.')
	})

}





var ensureTLSCertificatesExist = (args, callback) => {

	var ensureResult =
		Result
		.of(( ) => {

			var keypathExists  = fs.lstatSync(args.keypath) .isFile( )
			var certpathExists = fs.lstatSync(args.certpath).isFile( )

			return keypathExists && certpathExists

		})
		.then(bothExist => {

			if (args.certs || !bothExist) {
				createTLSCredentials(args.keypath, args.certpath, callbacks.createTLSCredentials)
			}

		})

	callback(ensureResult)

}





var server = rawArgs => {

	var args = server.processArgs(server.validateArgs(rawArgs))

	if (args.wipe) {

		if (args.database) {
			wipeData.database(callback)
		}

		if (args.logs) {
			wipeData.logs(callback)
		}

	} else {

		ensureTLSCertificatesExist(args, callbacks.ensureTLSCertificatesExist)

		loadDatabase(args.dbpath, database => {
			startApp(args, database)
		})

	}

}

server.validateArgs = args => {
	return args
}

server.processArgs = args => {
	return args
}





module.exports = server
