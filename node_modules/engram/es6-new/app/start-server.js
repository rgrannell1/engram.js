#!/usr/bin/env node

"use strict"




var log                       = require('engram/es6-new/logging/logger')
var Result                    = require('engram/es6-new/commons/result').Result
var commons                   = require('engram/es6-new/commons/commons')
var Ok                        = require('engram/es6-new/commons/result').Ok
var Err                       = require('engram/es6-new/commons/result').Err

var startApp                  = require('engram/es6-new/app/start-app')
var ensureTLSCredentialsExist = require('engram/es6-new/security/ensure-tls-credentials-exist')
var setupDatabase             = require('engram/es6-new/persistance/setup-database')




var callbacks = { }

callbacks.wipeData = wipeResult => {

	wipeResult.onOk(( ) => {
		log.global.info('successfully cleared database/logs.')
	})

	wipeResult.onErr(( ) => {
		log.global.info('failed to wipe database/logs.')
	})

}





var server = rawArgs => {

	var args = server.processArgs(server.validateArgs(rawArgs))

	if (args.wipe) {

		if (args.database) {
			wipeData.database(callback)
		}

		if (args.logs) {
			wipeData.logs(callback)
		}

	} else {

		ensureTLSCredentialsExist(args, ensureResult => {

			ensureResult.onErr(err => {
				log.global.error({err}, 'failed to ensure https certificates exist.')
			})

			setupDatabase(args.dbpath, databaseResult => {

				databaseResult.onErr(err => {

					log.global.error(err, 'failed to create tables.')

				})

				databaseResult.onOk(database => {

					log.global.info({ }, 'successfully created tables.')

					startApp(args, database)

				})


			})

		})

	}

}

server.validateArgs = args => {
	return args
}

server.processArgs = args => {
	return commons.cli.renameArgs(args)
}





module.exports = server
