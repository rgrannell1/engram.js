
"use strict"





var fs                  = require('fs')
var is                  = require('is')
var pem                 = require('pem')
var constants           = require('engram/commons/constants')
var Result              = require('engram/commons/result').Result
var Ok                  = require('engram/commons/result').Ok
var Err                 = require('engram/commons/result').Err

var log                 = require('engram/logging/logger')

var checkTLSCredentials = require('engram/security/check-tls-credentials')





var writeCredentials = (keypath, certpath, keys) => {

	writeCredentials.precond(keypath, certpath, keys)

	var writeResult = Result.of(( ) => {

		fs.writeFileSync(keypath,  keys.serviceKey)
		fs.writeFileSync(certpath, keys.certificate)

	})

	return writeResult

}

writeCredentials.precond = (keypath, certpath, keys) => {

	is.always.string(keypath)
	is.always.string(certpath)
	is.always.object(keys)

}




var callbacks = { }





callbacks.writeResultOk = (callback, keypath, certpath) => {
	return ( ) => {

		checkTLSCredentials({keypath, certpath}, exists => {

			if (!exists) {

				log.security.error({keypath, certpath}, 'failed to create tls certificates.')
				callback(Err(Error('failed to ensure certificates existed.')))

			} else {

				log.security.info({keypath, certpath}, 'created tls certificates.')
				callback(Ok( ))

			}

		})

	}
}

callbacks.writeResultErr = (callback, keypath, certpath) => {
	return err => {

		log.security.error({err, keypath, certpath}, 'failed to create tls certificates.')
		callback(Err(err))

	}
}





var credentialConfig = {

	days:       constants.cert.EXPIRATION,
	selfSigned: true,

	keyBitsize: constants.cert.KEYSIZE,
	commonName: constants.cert.COMMONNAME,
	country:    constants.cert.COUNTRY

}




var createTLSCredentials = (keypath, certpath, callback) => {

	createTLSCredentials.precond(keypath, certpath, callback)

	pem.createCertificate(credentialConfig, (err, keys) => {

		if (err) {
			callback(Err(err))
		}

		var writeResult = writeCredentials(keypath, certpath, keys)

		writeResult.onOk( callbacks.writeResultOk(callback, keypath, certpath))
		writeResult.onErr(callbacks.writeResultErr(callback, keypath, certpath))

	})

}

createTLSCredentials.precond = (keypath, certpath, callback) => {

	is.always.string(keypath)
	is.always.string(certpath)
	is.always.function(callback)

}





module.exports = createTLSCredentials
