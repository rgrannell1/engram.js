#!/usr/bin/env node
"use strict";

var log = require("engram/logger");

var Result = require("engram/result").Result;
var Ok = require("engram/result").Ok;
var Err = require("engram/result").Err;
var utils = require("engram/utils");

/*

	start(manager, reporter, state)


*/

var start = function (manager, reporter, state) {

	var reporter2 = function (args, state) {
		manager(recall, reporter(args, state));
	};

	var recall = function (args, timeout) {
		setTimeout(reporter2.bind({}, args, state), timeout);
	};

	manager(recall, state);
};

/*
	wrapReporter(reporter)

	wrap a reporter function in a second function.
*/

var wrapReporter = function (fn, reporter) {
	return function (args, state) {

		fn(args, state);
		reporter(args, state);
	};
};

/*
	reportAlive(registry)

*/

var reportAlive = function (registry) {
	registry.push(new Date().getTime());
};

var restartJob = function (jobName, job, registry) {

	console.log("restarting job.");

	var now = new Date().getTime();

	if (registry.length === 0) {

		reportAlive(registry);
	} else {

		var lastTime = registry[registry.length - 1];
	}
};

/*
	moniterWorkers(jobs)

	given an object containing the jobs to run, keep the jobs
	alive indefinitely.

*/

var moniterWorkers = function (jobs) {

	var moniterManager = function (recall, state) {

		// -- create and moniter jobs. Report in the registry.

		Object.keys(state.jobs).map(function (jobName) {

			var job = state.jobs[jobName];
			var registry = state.registry[jobName];

			state.registry[jobName] = registry || [];

			restartJob(jobName, job, state.registry);
		});

		console.log("moniter running.");

		recall(undefined, state.control.delay);
	};

	var moniterReporter = function (args, state) {
		return state;
	};

	var moniterState = {
		control: {
			delay: 1000
		},
		registry: {},
		jobs: jobs
	};

	start(moniterManager, moniterReporter, moniterState);
};

module.exports = {
	start: start,
	wrapReporter: wrapReporter,
	moniterWorkers: moniterWorkers
};