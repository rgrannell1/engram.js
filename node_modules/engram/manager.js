#!/usr/bin/env node
"use strict";

var is = require("is");
var log = require("engram/logger");

var Result = require("engram/result").Result;
var Ok = require("engram/result").Ok;
var Err = require("engram/result").Err;
var utils = require("engram/utils");

/*

	start(manager, reporter, state)


*/

var start = function (manager, reporter, state) {

	start.precond(manager, reporter, state);

	var reporter2 = function (args, state) {

		reporter2.precond(args, state);
		manager(recall, reporter(args, state));
	};

	reporter2.precond = function (args, state) {
		is.always.object(state);
	};

	var recall = function (args, timeout) {

		recall.precond(args, timeout);
		setTimeout(reporter2.bind({}, args, state), timeout);
	};

	recall.precond = function (args, timeout) {
		is.always.number(timeout);
	};

	manager(recall, state);
};

start.precond = function (manager, reporter, state) {

	is.always["function"](manager, "manager");
	is.always["function"](reporter, "reporter");
	is.always.object(state, "state");
};

/*
	wrapReporter(reporter)

	wrap a reporter function in a second function.
*/

var wrapReporter = function (fn, reporter) {

	wrapReporter.precond(fn, reporter);

	var wrapped = function (args, state) {

		wrapped.precond(args, state);

		fn(args, state);
		reporter(args, state);
	};

	wrapped.precond = function (args, state) {
		wrapped.precond(state);
	};

	return wrapped;
};

wrapReporter.precond = function (fn, reporter) {

	is.always["function"](fn);
	is.always["function"](reporter);
};

/*
	reportAlive(registry)

*/

var reportAlive = function (registry) {

	reportAlive.precond(registry);
	registry.push(new Date().getTime());
};

reportAlive.precond = function (registry) {
	is.always.array(registry);
};

var restartJob = function (jobName, job, registry) {

	var now = new Date().getTime();
	var neverStarted = registry.length === 0;

	if (neverStarted) {

		log.info({}, "starting " + jobName + ".");

		reportAlive(registry);

		start(job.moniter, wrapReporter(reportAlive.bind({}, registry), job.reporter), job.state);
		return;
	}

	var isStalled = now - registry[registry.length - 1] > job.timeout;

	if (isStalled) {

		log.info({}, "" + jobName + " stalled; restarting.");

		reportAlive(registry);
		start(job.moniter, wrapReporter(reportAlive.bind({}, registry), job.reporter), job.state);
		return;
	}
};

restartJob.precond = function (jobName, job, registry) {

	is.always.string("jobName");
	is.always.object(job);
	is.always.object(registry);
};

/*
	moniterWorkers(jobs)

	given an object containing the jobs to run, keep the jobs
	alive indefinitely.

*/

var moniterWorkers = function (jobs) {

	moniterWorkers.precond(jobs);

	var moniterManager = function (recall, state) {

		// -- create and moniter jobs. Report in the registry.

		Object.keys(state.jobs).map(function (jobName) {

			var job = state.jobs[jobName];
			var registry = state.registry[jobName];

			state.registry[jobName] = registry || [];

			restartJob(jobName, job, state.registry[jobName]);
		});

		recall(undefined, state.control.delay);
	};

	var moniterReporter = function (args, state) {
		return state;
	};

	var moniterState = {
		control: {
			delay: 1000
		},
		registry: {},
		jobs: jobs
	};

	start(moniterManager, moniterReporter, moniterState);
};

moniterWorkers.precond = function (jobs) {
	is.always.object(jobs);
};

module.exports = {
	start: start,
	wrapReporter: wrapReporter,
	moniterWorkers: moniterWorkers
};