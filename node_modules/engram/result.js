#!/usr/bin/env node
"use strict";

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var log = require("engram/logger");
var is = require("is");

var Result = (function () {
	function Result() {
		_classCallCheck(this, Result);
	}

	_prototypeProperties(Result, {
		of: {
			value: function of(fn) {
				return Ok(undefined).then(function () {
					return fn();
				});
			},
			writable: true,
			configurable: true
		},
		isResult: {
			value: function isResult(value) {
				return is.object(value) && (value.isErr === true || value.isOk === true);
			},
			writable: true,
			configurable: true
		},
		isErr: {
			value: function isErr(value) {
				return is.object(value) && value.isErr === true;
			},
			writable: true,
			configurable: true
		},
		isOk: {
			value: function isOk(value) {
				return is.object(value) && value.isOk === true;
			},
			writable: true,
			configurable: true
		}
	}, {
		fromOk: {
			value: function fromOk() {

				if (Result.isOk(this)) {
					return this.value;
				} else {
					throw TypeError("");
				}
			},
			writable: true,
			configurable: true
		},
		fromErr: {
			value: function fromErr() {

				if (Result.isErr(this)) {
					return this.value;
				} else {
					throw TypeError("");
				}
			},
			writable: true,
			configurable: true
		}
	});

	return Result;
})();

var _Err = (function (Result) {
	function _Err(value) {
		_classCallCheck(this, _Err);

		if (is.error(value) && true) {
			console.log(value.stack);
			console.log(value.message);
		}

		this.value = Result.isResult(value) ? value.value : value;

		this.isErr = true;
		this.isOk = false;

		return this;
	}

	_inherits(_Err, Result);

	_prototypeProperties(_Err, null, {
		then: {
			value: function then(fn) {
				return this;
			},
			writable: true,
			configurable: true
		},
		tap: {
			value: function tap(fn) {
				return this;
			},
			writable: true,
			configurable: true
		},
		onErr: {
			value: function onErr(fn) {
				fn(this.value);
				return this;
			},
			writable: true,
			configurable: true
		},
		onOk: {
			value: function onOk(fn) {
				return this;
			},
			writable: true,
			configurable: true
		},
		productOf: {
			value: function productOf() {
				return this;
			},
			writable: true,
			configurable: true
		},
		cross: {
			value: function cross(results) {
				return this;
			},
			writable: true,
			configurable: true
		}
	});

	return _Err;
})(Result);

var _Ok = (function (Result) {
	function _Ok(value) {
		_classCallCheck(this, _Ok);

		this.value = Result.isResult(value) ? value.value : value;

		this.isErr = false;
		this.isOk = true;

		return this;
	}

	_inherits(_Ok, Result);

	_prototypeProperties(_Ok, null, {
		onErr: {
			value: function onErr(fn) {
				return this;
			},
			writable: true,
			configurable: true
		},
		onOk: {
			value: function onOk(fn) {
				fn(this.value);
				return this;
			},
			writable: true,
			configurable: true
		},
		then: {
			value: function then(fn) {

				try {

					var result = fn(this.value);
					return Result.isErr(result) ? result : Ok(result);
				} catch (err) {
					return Err(err);
				}
			},
			writable: true,
			configurable: true
		},
		tap: {
			value: function tap(fn) {

				var result = this.then(fn);
				return Result.isErr(result) ? result : this;
			},
			writable: true,
			configurable: true
		},
		cross: {
			value: function cross(results) {

				var values = [this.value];

				for (var ith = 0; ith < results.length; ++ith) {

					if (!Result.isResult(results[ith])) {
						throw TypeError("");
					}

					if (results[ith].isOk) {
						values.push(result.value);
					} else {
						return result;
					}
				}

				return Ok(values);
			},
			writable: true,
			configurable: true
		},
		productOf: {
			value: function productOf(results) {

				var values = [];

				for (var ith = 0; ith < this.value.length; ++ith) {

					if (!Result.isResult(results[ith])) {
						throw TypeError("");
					}

					if (this.value[ith].isOk) {
						values.push(result.value);
					} else {
						return result;
					}
				}

				return Ok(values);
			},
			writable: true,
			configurable: true
		}
	});

	return _Ok;
})(Result);

// -- to get around the constructor without new problem
var Ok = function (value) {
	return new _Ok(value);
};

var Err = function (value) {
	return new _Err(value);
};

module.exports = {
	Err: Err,
	Ok: Ok,
	Result: Result
};
