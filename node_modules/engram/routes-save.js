#!/usr/bin/env node
"use strict";

var log = require("engram/logger");

var Result = require("engram/result").Result;
var Ok = require("engram/result").Ok;
var Err = require("engram/result").Err;

var is = require("is");
var express = require("express");

var saveBookmark = require("engram/save-bookmark");

var URL = require("url");
var validURL = require("valid-url");

var saveArchive = require("engram/save-archive");
var saveSoftFailStatus = require("engram/save-softfail");
var saveStatus = require("engram/save-status");
var saveTitle = require("engram/save-title");
var constants = require("engram/constants");

var save = express.Router({
	strict: true,
	mergeParams: true
});

var parseURL = function (url) {

	return Result.of(function () {

		var parsed = URL.parse(url);

		if (!is.string(parsed.protocol)) {
			url = "http://" + url;
		}

		return validURL.is_web_uri(url) ? Ok(url) : Err(url);
	});
};

save.use(function (req, res) {

	var pathResult = Ok(req).then(function (req) {
		return req.url;
	}).then(function (url) {
		return url.slice(1);
	}).then(parseURL);

	pathResult.onErr(function (path) {

		log.error({ url: req.url }, "failed to save url");

		res.status(404);
		res.end();
	});

	pathResult.onOk(function (url) {

		log.info({ url: req.url }, "GET " + url);

		var time = Math.round(new Date().getTime() / 1000);

		constants.BUS.fire(":url", {
			url: url,
			time: time,
			res: res
		});
	});
});

constants.BUS.on(":url", function (_ref) {
	var url = _ref.url;
	var time = _ref.time;
	var res = _ref.res;

	saveBookmark(url, time, function (result) {

		result.onErr(function (err) {

			log.error({
				message: err.message,
				stack: err.stack
			}, "failed to save " + url);

			if (res) {

				res.status(500);
				res.send("whoops! " + url + " failed.");
				res.end();
			}
		});

		result.onOk(function (_) {

			if (res) {
				res.status(204);
				res.end();
			}

			saveStatus(constants.BUS.fire.bind(constants.BUS, ":status"), [{ url: url }]);

			saveSoftFailStatus(constants.BUS.fire.bind(constants.BUS, ":softfail"), [{ url: url }]);

			saveTitle(constants.BUS.fire.bind(constants.BUS, ":title"), [{ url: url }]);

			saveArchive(constants.BUS.fire.bind(constants.BUS, ":archive"), [{ url: url }]);
		});
	});
});

module.exports = save;