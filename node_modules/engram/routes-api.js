#!/usr/bin/env node
"use strict";

var log = require("engram/logger");

var Result = require("engram/result").Result;
var Ok = require("engram/result").Ok;
var Err = require("engram/result").Err;

var is = require("is");
var express = require("express");
var bodyParser = require("body-parser");

var saveBookmark = require("engram/save-bookmark");
var showBookmarks = require("engram/show-bookmarks");
var fetchBookmarks = require("engram/fetch-bookmarks");
var deleteBookmark = require("engram/delete-bookmark");

var resaveBookmarks = require("engram/resave-bookmarks");

var URL = require("url");

var exitHandler = require("engram/exit-handler");
var mustache = require("mustache");

var api = express.Router();

var routes = {
	get: {},
	post: {},
	"delete": {}
};

var preprocess = {
	id: function (id) {

		return Ok(id).then(function (num) {
			return parseInt(num, 10);
		}).then(function (num) {
			return num !== num ? Err(422) : num;
		}).then(function (num) {
			return num < 0 ? Err(422) : num;
		}).then(function (num) {
			return num > 1000000 ? Err(422) : num;
		});
	},
	amount: function (amount) {

		return Ok(amount).then(function (num) {
			return parseInt(num, 10);
		}).then(function (num) {
			return num !== num ? Err(422) : num;
		}).then(function (num) {
			return num < 0 ? Err(422) : num;
		}).then(function (num) {
			return num > 1000000 ? Err(422) : num;
		});
	}
};

routes.get["/bookmarks"] = function (req, res) {

	var maxIdResult = preprocess.id(req.query.max_id);
	var amountResult = preprocess.amount(req.query.amount);

	Ok([maxIdResult, amountResult]).productOf().then(function (pair) {

		fetchBookmarks(pair[0], pair[1], res);
	});
};

routes.get["/bookmarks/all"] = function (req, res) {

	fetchBookmarks(10000000, 10000000, res);
};

routes.get["/archive/:id"] = function (req, res, next) {

	log.info({ id: req.params.id }, "DELETE /archive/" + req.params.id);

	var maxIdResult = preprocess.id(req.query.max_id);
	var amountResult = preprocess.amount(req.query.amount);

	Ok([maxIdResult, amountResult]).productOf().then(function (pair) {

		fetchBookmarks(pair[0], pair[1], res);
	});
};

routes.post["/import"] = function (req, res) {

	log.info("/import");

	importBookmarks(req.body, req, res);
	res.status(202);

	res.contentType = "text/html; charset=utf8";

	res.end();
};

routes["delete"]["/bookmarks/:id"] = function (req, res) {

	log.info({ id: req.params.id }, "DELETE /api/bookmarks/" + req.params.id);

	deleteBookmark(res, req.params.id);
};

api.get("/bookmarks", routes.get["/bookmarks"]);
api.get("/bookmarks/all", routes.get["/bookmarks/all"]);

api["delete"]("/bookmarks/:id", routes["delete"]["/bookmarks/:id"]);

api.get("/archive/:id", routes.get["/archive/:id"]);

api.use(bodyParser.json({ limit: "100mb" }));

api.post("/import", routes.post["/import"]);

module.exports = api;