
"use strict"




var is        = require('is')
var log       = require('engram/logging/logger')
var commons   = require('engram/commons/commons')
var constants = require('engram/commons/constants')



var routeUtils = { }





var placeholders = { }

placeholders.validator = (req, res, next, ...args) => {

	log.global.info({ }, req.method.toUpperCase( ) + ' ' + req.path)

	next( )

}





placeholders.preprocessor = (req, res, next, ...args) => {

	req.engram = {
		id: commons.random.digits(constants.sizes.id)
	}

	res.engram = {
		startTime: process.hrtime( )
	}

	next( )

}





placeholders.main = (req, res, next, ...args) => {
	next( )
}





placeholders.sender = (req, res, next, ...args) => {

	placeholders.sender.logElapsed(res)
	res.send( )

}

placeholders.sender.logElapsed = res => {

	var elapsed      = process.hrtime(res.engram.startTime)
	var nanoseconds  = (elapsed[0] * 1e9) + elapsed[1]
	var milliseconds = Math.round(nanoseconds / 1e6, 0)

}





var parts = { }

parts.router = ({

	mergeParams   = false,
	caseSensitive = true,
	strict        = false,
	mount

}) => {

	parts.router.precond(mergeParams, caseSensitive, strict, mount)

	return {mergeParams, caseSensitive, strict, mount}

}

parts.router.precond = (mergeParams, caseSensitive, strict, mount) => {

	is.always.boolean(mergeParams)
	is.always.boolean(caseSensitive)
	is.always.boolean(strict)
	is.always.string(mount)

}





parts.route = ({

	router   = 'app',
	method,
	protocol = 'https',
	route,
	id

}) => {

	return {
		router,
		method,
		protocol,
		route,
		id,

		validators:    [placeholders.validator],
		preprocessors: [placeholders.preprocessor],
		main:          [placeholders.main], // edit.
		senders:       [placeholders.sender]
	}

}




module.exports = parts
