
"use strict"




var specs = {
	routers: { },
	routes:  [ ]
}





var defaults = { }

defaults.validator = (req, res, next, ...args) => {
	next( )
}





defaults.preprocessor = (req, res, next, ...args) => {

	defaults.preprocessor.boilerplate(req, res)

	next( )

}

defaults.preprocessor.boilerplate = (req, res) => {

	log.global.info({ }, req.method.toUpperCase( ) + ' ' + req.path)

	res.engram = {
		startTime: process.hrtime( )
	}

}





defaults.main = (req, res, next, ...args) => {
	next( )
}





defaults.sender = (req, res, next, ...args) => {

	defaults.sender.logElapsed(res)
	res.send( )

}

defaults.sender.logElapsed = res => {

	var elapsed      = process.hrtime(res.engram.startTime)
	var nanoseconds  = (elapsed[0] * 1e9) + elapsed[1]
	var milliseconds = Math.round(nanoseconds / 1e6, 0)

}





var parts = {

	router: ({

		mergeParams   = false,
		caseSensitive = true,
		strict        = false,
		mount

	}) => {
		return {mergeParams, caseSensitive, strict, mount}
	},

	route: ({

		router   = 'app',
		method,
		protocol = 'https',
		route

	}) => {

		return {
			router,
			method,
			protocol,
			route,

			validators:    [defaults.validator],
			preprocessors: [defaults.preprocessor],
			main:          [defaults.main], // edit.
			senders:       [defaults.sender]
		}

	}

}





specs.routers = {
	save: parts.router({

		mount:       '/',
		strict:      true,
		mergeParams: true

	}),
	api:  parts.router({

		mount: '/api'

	}),
	app:  parts.router({

		mount: '/'

	})
}




specs.routes = [

	parts.route({
		method: 'all',
		route: '*'
	}),

	parts.route({
		method: 'get',
		route: '/bookmarks'
	}),

	parts.route({
		method: 'post',
		route: '/import'
	}),

	parts.route({
		method: 'get',
		route: '/bookmarks/:id'
	}),

	parts.route({
		method: 'delete',
		route: '/archive/:id'
	})

]






module.exports = specs
