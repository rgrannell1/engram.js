#!/usr/bin/env node
"use strict";

var log = require("engram/logger");

var Result = require("engram/result").Result;
var Ok = require("engram/result").Ok;
var Err = require("engram/result").Err;

var is = require("is");
var request = require("request");

var extractTitle = require("engram/extract-title");
var createArchive = require("engram/create-archive");
var log = require("engram/logger");
var database = require("engram/database");
var sizeof = require("object-sizeof");

{

	var digest = function (string) {

		var hash = 0;

		if (string.length === 0) {
			return hash;
		}

		for (var ith = 0; ith < string.length; ++ith) {

			hash = (hash << 5) - hash + string.charCodeAt(ith);
			hash |= 0;
		}

		return hash;
	};

	var hashObject = function (obj) {

		if (is.string(obj)) {

			return digest(obj);
		} else if (is.number(obj)) {

			return digest(obj + "");
		} else if (is.object(obj)) {

			return digest(Object.keys(obj).map(function (key) {
				return digest(obj[key]);
			}).join(""));
		} else if (is.array(obj)) {
			return digest(obj.map(digest).join(""));
		} else {
			return "";
		}
	};

	var cache = {
		order: [],
		value: {}
	};

	var cachedRequest = function (uri, options, callback) {

		var hash = digest({ uri: uri, options: options });

		if (cache.value.hasOwnProperty(hash)) {
			return cache.value[hash];
		} else {

			request(uri, options, function (err, res, body) {

				if (!err) {

					cache.value[hash] = { res: res, body: body };
					cache.order.push(cache.value[hash]);
				}

				callback(err, res, body);
			});
		}
	};

	var requestURL = function (uri, opts, callback) {

		try {
			cachedRequest(uri, opts, callback);
		} catch (err) {
			callback(Err(err));
		}
	};
}

var saveURL = function (_ref) {
	var url = _ref.url;
	var urlID = _ref.urlID;

	var opts = {
		uri: url
	};

	var onSaveType = function (insertResult) {
		insertResult.onErr(function (err) {
			log.error({ message: err.message, stack: err.stack });
		});
	};

	// -- associate the content with the url.
	var onSaveContent = function (urlID, insertResult) {

		insertResult.then(function (contentID) {

			console.log("content saved");
			console.log(urlID);
			console.log(contentID);
			console.log("content saved");
		});
	};

	// -- insert the content into the database
	var onSaveURLStatus = function (body, insertResult) {

		insertResult.then(function (urlID) {
			saveContent(body, onSaveContent.bind({}, urlID));
		});
	};

	// -- associate the status code with a url.
	var onSaveStatus = function (insertResult) {

		insertResult.then(function (_ref2) {
			var res = _ref2.res;
			var body = _ref2.body;
			var statusID = _ref2.statusID;

			saveURLStatus(urlID, statusID, onSaveURLStatus.bind({}, body));
		});
	};

	requestURL(opts, function (contentResult) {
		contentResult.then(function (_ref2) {
			var res = _ref2.res;
			var body = _ref2.body;

			saveStatus(res, body, onSaveStatus);
			saveType(res.headers["content-type"] || "text/html", onSaveType);
		});
	});
};

var saveStatus = function (res, body, callback) {

	// -- add more error codes.
	var status = res.status;

	database["do"](function (db, callback) {

		db.run("INSERT OR IGNORE INTO status VALUES (NULL, $code, NULL, $mtime);", {

			$code: status,
			$mtime: new Date().getTime() / 1000

		}, function (err) {

			callback(err ? Err(err) : Ok({ res: res, body: body, statusID: this.lastID }));
		});
	}, callback);
};

var saveURLStatus = function (urlID, statusID, callback) {

	database["do"](function (db, callback) {

		db.run("INSERT OR IGNORE INTO url_status VALUES ($urlID, $statusID)", {
			$urlID: urlID,
			$statusID: statusID
		}, function (err) {

			callback(err ? Err(err) : Ok(urlID));
		});
	}, callback);
};

var saveContent = function (body, callback) {

	database["do"](function (db, callback) {

		db.run("INSERT INTO content VALUES (NULL, $content, $ctime, $mtime)", {

			$content: body,
			$ctime: Math.round(new Date().getTime() / 1000),
			$mtime: Math.round(new Date().getTime() / 1000)

		}, function (err) {

			callback(err ? Err(err) : Ok(this.lastID));
		});
	}, callback);
};

var saveType = function (contentType, callback) {

	database["do"](function (db, callback) {

		db.run("INSERT OR IGNORE INTO type VALUES (NULL, $type);", {
			$type: contentType
		}, function (err) {
			callback(err ? Err(err) : Ok());
		});
	}, callback);
};

module.exports = saveURL;
