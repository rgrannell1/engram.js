#!/usr/bin/env node
'use strict';

var http = require('http');
var should = require('should');
var request = require('supertest');
var engram = require('engram/es5/engram');

var app;

describe('/:path', function () {

	before(function (done) {

		app = engram({
			port: 5000,
			dbpath: ':memory:',
			start: false
		});

		setTimeout(done, 1000);
	});['/ftp://foo.bar', '/file://baz.bar'].forEach(function (url) {

		it('should 404 for non-http/https URLs', function (done) {

			request(app).get(url).expect(404).end(function (err) {

				if (err) {
					throw err;
				} else {
					done();
				}
			});
		});
	});['/http://google.com', '/https://google.com', '/http://google.com?foo=bar&bash=baz', '/https://bar/baz/?foo=bar&bash=baz', '/www.google.com?foo=bar&bash=baz'].forEach(function (url) {

		it('should 204 for http and https', function (done) {

			request(app).get(url).expect(204).end(function (err) {

				if (err) {
					throw err;
				} else {
					done();
				}
			});
		});
	});

	it('should be able to recover bookmarks after saving', function (done) {

		// -- saved earlier.

		request(app).get('/bookmarks/1').expect('Content-Type', 'application/json; charset=utf-8').expect(function (res) {
			return res.body.hasOwnProperty('url');
		}).expect(200).end(function (err) {

			if (err) {
				throw err;
			} else {
				done();
			}
		});
	});

	it('should 404 for bookmarks that dont exist', function (done) {

		request(app).get('/bookmarks/1000000').expect(404).end(function (err) {

			if (err) {
				throw err;
			} else {
				done();
			}
		});
	});
});
