#!/usr/bin/env node




var http      = require('http')
var should    = require('should')
var request   = require('supertest')
var engram    = require('engram/engram')




var app

describe('/*', ( ) => {

	before(done => {

		app = engram({
			port:     5000,
			dbpath:  ':memory:'
		})

		setTimeout(done, 2000)

	})

	it('should 404 for non-http/https URLs', ( ) => {

		request(app)
		.get('/ftp://foo.bar')
		.expect(404)
		.end(err => {
			if (err) throw err
		})

		request(app)
		.get('/file://baz.bar')
		.expect(404)
		.end(err => {
			if (err) throw err
		})

	})


	it('should 200 for http', ( ) => {

		request(app)
		.get('/http://google.com')
		.expect(200)
		.end(err => {
			if (err) throw err
		})

	})


	it('should 200 for https', ( ) => {

		request(app)
		.get('/https://google.com')
		.expect(200)
		.end(err => {
			if (err) throw err
		})

	})


	it('should 200 with query string', ( ) => {

		request(app)
		.get('/http://google.com?foo=bar&bash=baz')
		.expect(200)
		.end(err => {
			if (err) throw err
		})

		request(app)
		.get('/https://bar/baz/?foo=bar&bash=baz')
		.expect(200)
		.end(err => {
			if (err) throw err
		})

	})

	it('should 200 without the protocol',( ) => {

		request(app)
		.get('/www.google.com?foo=bar&bash=baz')
		.expect(200)
		.end(err => {
			if (err) throw err
		})

	})

})





describe('/*', ( ) => {

	before(done => {

		app = engram({
			port:     5001,
			dbpath:  ':memory:'
		})

		setTimeout(done, 2000)

	})

	it('', ( ) => {

		request(app)
		.get('/ftp://foo.bar')
		.expect(404)
		.end(err => {
			if (err) throw err
		})

		request(app)
		.get('/file://baz.bar')
		.expect(404)
		.end(err => {
			if (err) throw err
		})

	})

})
