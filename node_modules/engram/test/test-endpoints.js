
"use strict"



var request   = require('request')
var express   = require('express')
var constants = require('./constants')
var commons   = require('./commons')
var server    = require('../app/start-server')
var mocha     = require('mocha')

var expect    = require('chai').expect
var supertest = require('supertest')




var expressRoutes = app => {

	return app._router.stack
		.map(layer => {

			if (layer.route && layer.route.path) {
				return layer.route.path
			}

		})
		.filter(path => {
			return typeof path !== 'undefined'
		})

}





describe('- route existence', function ( ) {

	var testApps
	var testServers

	this.timeout(10000)

	before(done => {

		server(commons.defaultArgs({

			port: commons.freePortNumber( )

		}), (apps, servers) => {
			testApps    = apps
			testServers = servers
			done( )
		})

	})

	it('has a spec for each protocol', ( ) => {

		Object.keys(testApps).forEach(protocol => {
			expect(testApps[protocol].specs).to.be.an('array')
		})

	})

	it('has the routes expected by the spec object', ( ) => {

		Object.keys(testApps).forEach(protocol => {

			var attachedRoutes = expressRoutes(testApps[protocol])

			testApps[protocol].specs.forEach(spec => {

				expect(attachedRoutes).to.include(spec.route)

			})

		})
	})





	it('redirects http traffic to https', ( ) => {

		for (var ith = 0; ith < 100; ++ith) {

			;[

				'/bookmarks',
				'/bookmarks/0',

			].forEach(path => {

				supertest(testApps.http)
					.get(path)
					.expect('Location', /^https/)
					.expect(301)

			})

		}

	})

	after(done => {

		testServers.http.close(( ) => {
			testServers.https.close(done)
		})

	})

})
