#!/usr/bin/env node
"use strict";

var log = require("engram/logger");
var is = require("is");

var database = require("engram/database");
var createTables = require("engram/create-tables");

var Result = require("engram/result").Result;
var Ok = require("engram/result").Ok;
var Err = require("engram/result").Err;

var statements = ["\n\tCREATE TABLE IF NOT EXISTS archive (\n\n\t\tarchive_id     integer    PRIMARY KEY    AUTOINCREMENT,\n\n\t\tcontent        text       NOT NULL,\n\t\ttype_id        integer    REFERENCES     type(type_id),\n\n\t\tctime          integer    NOT NULL       REFERENCES time(time),\n\t\tmtime          integer    NOT NULL       REFERENCES time(time)\n\n\t);", "\n\tCREATE TABLE IF NOT EXISTS content (\n\n\t\tcontent_id    integer    PRIMARY KEY    AUTOINCREMENT,\n\n\t\ttype_id       integer    REFERENCES     type(type_id),\n\t\tcontent       text       NOT NULL,\n\n\t\tctime         integer    NOT NULL       REFERENCES time(time),\n\t\tmtime         integer    NOT NULL       REFERENCES time(time)\n\n\t);", "\n\tCREATE TABLE IF NOT EXISTS type (\n\n\t\ttype_id    integer    PRIMARY KEY    AUTOINCREMENT,\n\n\t\ttype       text     UNIQUE           CHECK(length(type) > 0)\n\n\t);", "\n\tCREATE TABLE IF NOT EXISTS time (\n\n\t\ttime    integer    PRIMARY KEY    AUTOINCREMENT    CHECK(time > 0 and time <= 4294967295)\n\n\t);", "\n\tCREATE TABLE IF NOT EXISTS url_archive (\n\n\t\turl_id        integer    REFERENCES url(url_id),\n\t\tarchive_id    integer    REFERENCES archive(archive_id),\n\n\t\tPRIMARY KEY (url_id, archive_id)\n\n\t);", "\n\tCREATE TABLE IF NOT EXISTS url_content (\n\n\t\turl_id        integer    REFERENCES url(url_id),\n\t\tcontent_id    integer    REFERENCES content(content_id),\n\n\t\tPRIMARY KEY (url_id, content_id)\n\n\t);", "\n\tCREATE TABLE IF NOT EXISTS url (\n\n\t\turl_id    integer    PRIMARY KEY    AUTOINCREMENT,\n\n\t\turl       text       UNIQUE         CHECK(length(url) > 0),\n\n\t\tctime     integer    NOT NULL       REFERENCES time(time),\n\t\tmtime     integer    NOT NULL       REFERENCES time(time)\n\n\n\t);", "\n\tCREATE TABLE IF NOT EXISTS url_title (\n\n\t\turl_id      integer    REFERENCES url(url_id),\n\t\ttitle_id    integer    REFERENCES title(title_id),\n\n\t\tPRIMARY KEY (url_id, title_id)\n\n\t);", "\n\tCREATE TABLE IF NOT EXISTS title (\n\n\t\ttitle_id    integer    PRIMARY KEY    AUTOINCREMENT,\n\n\t\ttitle       text       NOT NULL       CHECK(length(title) > 0),\n\n\t\tctime     integer      NOT NULL       REFERENCES time(time),\n\t\tmtime     integer      NOT NULL       REFERENCES time(time)\n\n\t);", "\n\tCREATE TABLE IF NOT EXISTS bookmark (\n\n\t\tbookmark_id    integer    PRIMARY KEY    AUTOINCREMENT,\n\n\t\turl_id         integer    NOT NULL       REFERENCES url(url_id),\n\n\t\tctime         integer     NOT NULL       REFERENCES time(time),\n\t\tmtime         integer     NOT NULL       REFERENCES time(time)\n\n\t);", "\n\tCREATE TABLE IF NOT EXISTS status (\n\n\t\tstatus_id    integer    PRIMARY KEY,\n\t\tcode         integer    NOT NULL    CHECK(code > 0 and code < 600),\n\n\t\tctime        integer    NOT NULL       REFERENCES time(time),\n\t\tmtime        integer    NOT NULL       REFERENCES time(time)\n\n\t);", "\n\tCREATE TABLE IF NOT EXISTS url_status (\n\n\t\turl_id         integer    NOT NULL       REFERENCES url(url_id),\n\t\tstatus_id      integer    NOT NULL       REFERENCES status(status_id),\n\n\t\tPRIMARY KEY (url_id, status_id)\n\n\n\t);"];

var createTables = function (callback) {

	database["do"](function (db, callback) {

		statements.forEach(function (sql) {

			log.info({ sql: sql }, "creating table.");
			db.run(sql, function (err) {

				if (err) {
					callback(Err(err));
				}
			});
		});

		// -- horrible! not running serially! need to await result of each callback.
		setTimeout(callback, 1000);
	}, callback);
};

module.exports = createTables;
