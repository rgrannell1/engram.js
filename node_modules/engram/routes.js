#!/usr/bin/env node
"use strict";

var log = require("engram/logger");

var Result = require("engram/result").Result;
var Ok = require("engram/result").Ok;
var Err = require("engram/result").Err;

var is = require("is");
var express = require("express");

var saveBookmark = require("engram/save-bookmark");
var showBookmarks = require("engram/show-bookmarks");
var fetchBookmarks = require("engram/fetch-bookmarks");
var URL = require("url");

var exitHandler = require("engram/exit-handler");
var mustache = require("mustache");

var api = express.Router();
var app = express.Router();
var save = express.Router({
	strict: true });

var preprocess = {
	id: function (id) {

		return Ok(id).then(function (num) {
			return parseInt(num, 10);
		}).then(function (num) {
			return num !== num ? Err(422) : num;
		}).then(function (num) {
			return num < 0 ? Err(422) : num;
		}).then(function (num) {
			return num > 1000000 ? Err(422) : num;
		});
	},
	amount: function (amount) {

		return Ok(amount).then(function (num) {
			return parseInt(num, 10);
		}).then(function (num) {
			return num !== num ? Err(422) : num;
		}).then(function (num) {
			return num < 0 ? Err(422) : num;
		}).then(function (num) {
			return num > 1000000 ? Err(422) : num;
		});
	}
};

api.get("/bookmarks", function (req, res, next) {

	var maxIdResult = preprocess.id(req.query.max_id);
	var amountResult = preprocess.amount(req.query.amount);

	Ok([maxIdResult, amountResult]).productOf().then(function (pair) {

		fetchBookmarks(pair[0], pair[1], res);
	});
});

var parseURL = function (url) {

	return Result.of(function () {

		var parsed = URL.parse(url);

		if (!is.string(parsed.protocol)) {
			parsed.protocol = "http:";
			parsed.slashes = true;
		}

		return URL.format(parsed);
	});
};

app.get("/", function (req, res) {
	res.redirect("/bookmarks");
});

app.get("/bookmarks", function (req, res) {

	res.send(showBookmarks());
	res.status(200);

	res.contentType = "text/html; charset=utf8";

	res.end();
});

app.use("/public", express["static"](process.cwd() + "/public"));

app.get("/favico.ico", function (req, res) {

	res.status(404);
	res.end();
});

app.get("/import", function (req, res) {});

app.get("/export", function (req, res) {});

save.use(function (req, res) {

	var pathResult = Ok(req).then(function (req) {
		return req.url;
	}).then(function (url) {
		return url.slice(1);
	}).then(parseURL);

	pathResult.onOk(function (path) {

		log.info({ url: req.url }, "GET " + path);

		saveBookmark(path, Math.round(new Date().getTime() / 1000), { req: req, res: res });
		res.status(204);
		res.contentType("text/html; charset=utf8");

		res.end();
	});

	pathResult.onErr(function (path) {

		log.error({ url: req.url }, "failed to save url");

		res.status(404);
		res.end();
	});
});

module.exports = {
	api: api,
	app: app,
	save: save
};
