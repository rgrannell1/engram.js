#!/usr/bin/env node
"use strict";

var is = require("is");
var log = require("engram/logger");

var Result = require("engram/result").Result;
var Ok = require("engram/result").Ok;
var Err = require("engram/result").Err;

var requestURL = require("engram/request-url");
var database = require("engram/database");
var constants = require("engram/constants");

var saveArchive = require("engram/save-archive");

/*
	findUnresolvedURL(callback)

	select the URLS that don't have a status code.
*/

var findUnarchivedURL = function (callback) {

	var sql = "\n\tSELECT url FROM archive\n\tWHERE archive is NULL or content_type is NULL\n\n\tORDER BY RANDOM()\n\tLIMIT 1;\n\t";

	database["do"](function (db, callback) {

		db.all(sql, function (err, rows) {
			err ? callback(Err(err)) : callback(Ok(rows));
		});
	}, callback);
};

/*
	save a single unresolved URL to the database before reporting.
*/

var job = function (reporter) {

	var onURL = function (urlResult) {

		urlResult.onErr(function (errData) {
			reporter(Err(errData));
		});

		urlResult.onOk(saveArchive.bind({}, reporter));
	};

	onURL.precond = function (urlResult) {
		is.always.object(urlResult);
	};

	findUnarchivedURL(onURL);
};

/*
	report whether a url was found or not.
*/

var reporter = function (urlResult) {

	reporter.precond(urlResult);

	constants.BUS.fire(":archive", urlResult);
};

reporter.precond = function (urlResult) {
	is.always.object(urlResult);
};

module.exports = {
	reporter: reporter,
	job: job,
	interval: 30 * 1000
};