#!/usr/bin/env node

"use strict"





var utils     = require('engram/es5/utils')
var constants = require('engram/es5/constants')
var log       = require('engram/es5/logger')

var basicAuth = require('basic-auth')
var fs        = require('fs')





{
	// -- TODO improve credential storage. Plain text is not ideal.

	var loginDetails

	try {

		let details  = fs.readFileSync(constants.CREDENTIAL_PATH).toString( ).split(':')

		loginDetails = {
			username: details[0],
			password: details[1]
		}

	} catch (err) {
		throw new Error('failed to correctly parse user credentials')
	}

}





var existing = {
	user: user => {
		return user && user.name === loginDetails.username
	},
	pass: user => {
		return user && user.pass === loginDetails.password
	}
}




var askForAuth = res => {

	res.set('WWW-Authenticate', 'Basic realm="Engram Authorisation"')
	res.status(401)
	res.send('Enter username:password to login.')

}





{
	let counts = { }

	var getInvalidCount = ip => {

		counts[ip] = counts.hasOwnProperty(ip)
			? counts[ip] + 1
			: 0

		return counts[ip]

	}

}





var checkValidUser = (req, res) => {

	var user = basicAuth(req)

	if (user && user.name && user.pass) {

		return true

	} else {

		// -- TODO fix these parametres.
		log.security.warn({

			user: !!user,
			name: !!(user && user.name),
			pass: !!(user && user.pass)

		}, 'login attempt missing credentials; Re-requesting.')

		setTimeout(askForAuth, constants.REAUTH_TIMEOUT, res)

		return false

	}

}

var checkValidLogin = (req, res, next) => {

	var user     = basicAuth(req)
	var ipResult = utils.getIpAddress(req)




	ipResult.onErr(err => {
		log.security.error({err}, 'failed to fetch user IP.')
	})

	ipResult.onOk(ip => {

		var foundUsername = existing.user(user)
		var foundPassword = existing.pass(user)

		if (foundUsername && foundPassword) {

			log.security.debug({

				ip, invalidTries: getInvalidCount(ip)

			}, 'correct username and password supplied.')

			next( )

		} else {

			log.security.warn({

				validUser:    existing.user(user),
				validPass:    existing.pass(user),
				invalidTries: getInvalidCount(ip),
				ip

			}, 'incorrect login details supplied; re-requesting.')

			setTimeout(askForAuth, constants.REAUTH_TIMEOUT, res)


		}

	})

}





var requestAuth = (req, res, next) => {

	var ipResult = utils.getIpAddress(req)

	ipResult.onOk(ip => {

		log.security.debug({
			ip,
			invalidTries: getInvalidCount(ip)
		}, 'verifying credentials.')

		if (checkValidUser(req, res)) {
			checkValidLogin(req, res, next)
		}
	})

}




module.exports = requestAuth
