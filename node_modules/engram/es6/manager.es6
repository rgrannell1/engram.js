#!/usr/bin/env node

"use strict"





var log           = require('engram/logger')

var Result        = require('engram/result').Result
var Ok            = require('engram/result').Ok
var Err           = require('engram/result').Err
var utils         = require('engram/utils')




/*

	start(manager, reporter, state)


*/

var start = (manager, reporter, state) => {

	var reporter2 = (args, state) => {
		manager(recall, reporter(args, state))
	}

	var recall = (args, timeout) => {
		setTimeout(reporter2.bind({ }, args, state), timeout)
	}

	manager(recall, state)

}





/*
	wrapReporter(reporter)

	wrap a reporter function in a second function.
*/

var wrapReporter = (fn, reporter) => {
	return (args, state) => {

		fn(args, state)
		reporter(args, state)

	}
}





/*
	reportAlive(registry)

*/

var reportAlive = registry => {
	registry.push(new Date( ).getTime( ))
}





var restartJob = (jobName, job, registry) => {

	var now = new Date( ).getTime( )

	var neverStarted = registry.length === 0

	if (neverStarted) {

		log.info({ }, `starting ${jobName}.`)

		reportAlive(registry)
		start(job.manager, wrapReporter(reportAlive.bind({ }, registry), job.reporter), job.state)
		return

	}

	var isStalled = now - registry[registry.length - 1] > job.timeout

	if (isStalled) {

		log.info({ }, `${jobName} stalled; restarting.`)

		reportAlive(registry)
		start(job.manager, wrapReporter(reportAlive.bind({ }, registry), job.reporter), job.state)
		return

	}

}





/*
	moniterWorkers(jobs)

	given an object containing the jobs to run, keep the jobs
	alive indefinitely.

*/

var moniterWorkers = jobs => {

	var moniterManager = (recall, state) => {

		// -- create and moniter jobs. Report in the registry.

		Object.keys(state.jobs).map(jobName => {

			var job                 = state.jobs[jobName]
			var registry            = state.registry[jobName]

			state.registry[jobName] = registry || [ ]

			restartJob(jobName, job, state.registry[jobName])

		})

		recall(undefined, state.control.delay)

	}

	var moniterReporter = (args, state) => {
		return state
	}

	var moniterState = {
		control: {
			delay: 1000
		},
		registry: { },
		jobs
	}






	start(moniterManager, moniterReporter, moniterState)

}





module.exports = {
	start,
	wrapReporter,
	moniterWorkers
}
