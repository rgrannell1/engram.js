#!/usr/bin/env node

"use strict"





var log           = require('engram/logger')

var Result        = require('engram/result').Result
var Ok            = require('engram/result').Ok
var Err           = require('engram/result').Err

var is            = require('is')

var extractTitle  = require('engram/extract-title')
var createArchive = require('engram/create-archive')
var log           = require('engram/logger')
var database      = require('engram/database')










var findTitlelessURLs = callback => {

	var sql = `
	SELECT url.url, url.url_id
	FROM url
	LEFT OUTER JOIN title on title.title_id = url.url_id
	WHERE title.title_id is NULL;
	`

	database.do((db, callback) => {

		db.all(sql, (err, rows) => {
			err ? callback(Err(err)) : callback(Ok(rows))
		})

	}, callback)

}





var findArchivelessURLs = callback => {

	var sql = `
	SELECT url.url, url.url_id
	FROM url
	LEFT OUTER JOIN archive on archive.archive_id = url.url_id
	WHERE archive.archive_id is NULL;
	`

	database.do((db, callback) => {

		db.all(sql, (err, rows) => {
			err ? callback(Err(err)) : callback(Ok(rows))
		})

	}, callback)

}




var titleWorker = findTitlelessURLs.bind({ }, urlsResult => {

	urlsResult.onErr(err => {
		// -- note somewhere ? quite serious.
		//
	})

	urlsResult.onOk(urls => {
		urls.forEach(console.log)
	})

})





var moniterWorkers = ( ) => {

	// -- todo; maybe factor out worker/moniter into pairs;
	// -- moniter controls execution/termination of worker, may
	// -- request new worker? allows rate adjustment, worker termination,
	// -- and external exception handling.

	var workers = [
		{interval: 10 * 1000, worker: titleWorker}
	]

	var pids = workers.map( ({interval, worker}) => setInterval(worker, interval))

}





module.exports = moniterWorkers
