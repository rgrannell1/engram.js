#!/usr/bin/env node

"use strict"





var log = require('engram/logger')

var is          = require('is')
var https       = require('https')
var express     = require('express')
var bunyan      = require('bunyan')

var routes      = require('engram/routes')
var database    = require('engram/database')

var exitHandler = require('engram/exit-handler')





var createTables = (callback) => {

	var statements = [
		`
		CREATE TABLE IF NOT EXISTS archives (
			archive_id    integer     PRIMARY KEY    AUTOINCREMENT,
			content       blob        NOT NULL,
			mimetype      text        NOT NULL,
			ctime         integer     NOT NULL
		);`,

		`
		CREATE TABLE IF NOT EXISTS bookmarks (
			bookmark_id    integer    PRIMARY KEY    AUTOINCREMENT,
			url            text       NOT NULL,
			title          text       NOT NULL,
			ctime          integer    NOT NULL
		);`,


		`
		CREATE TABLE IF NOT EXISTS bookmark_archives (
			bookmark_archive_id    integer    PRIMARY KEY    AUTOINCREMENT,
			bookmark_id            REFERENCES bookmarks(bookmark_id),
			archive_id             REFERENCES archives(archive_id)
		);`
	]

	statements.forEach(sql => {

		database.do(
			(db, callback) => {

				log.info({sql}, 'creating table.')
				db.run(sql)

			}
		)

	})

	// -- not called serially.
	callback( )

}





var create = ({port}) => {

	var app = express( )

	app
	.listen(port, ( ) => {
		log.info(`engram listening on port ${port}`)
	})
	.on('error', err => {

		var handled = {
			EADDRINUSE: `port ${port} currently in use`
		}

		err.code in handled
			? log.error(handled[err.code])
			: log.error(err.toString( ))

	})

	createTables(( ) => {

		app
		.use('/',    routes.app)
		.use('/api', routes.api)

		process.on('uncaughtException', exitHandler.bind({ }, true))
		process.on('SIGINT',            exitHandler.bind({ }, true))
		process.on('exit',              exitHandler.bind({ }, false))

	})

}





create({
	port: 5000
})
