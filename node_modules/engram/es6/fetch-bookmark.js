#!/usr/bin/env node

"use strict"





var is          = require('is')
var log         = require('engram/es5/logger')

var Ok          = require('engram/es5/result').Ok
var Err         = require('engram/es5/result').Err

var database    = require('engram/es5/database')
var bookmark    = require('engram/es5/bookmark')





var sendBookmark = (res, id, rowResult) => {

	rowResult.onErr(err => {

		log.global.error({
			message:    err.message,
			stack:      err.stack,
			bookmarkId: id
		}, 'bookmark lookup failed.')

		res.status(404)
		res.send(err.message)

	})

	rowResult.onOk(row => {

		if (row.length === 0) {
			res.sendStatus(404)
		} else {


			var parsedResult = bookmark.bookmark(row[0])

			parsedResult.onErr(err => {

				log.global.error({
					message: err.message,
					stack:   err.stack,
				}, 'bookmark lookup failed.')

				res.status(404)
				res.send(err.message)

			})

			parsedResult.onOk(parsed => {

				res.status(200)
				res.contentType('application/json')

				res.send(parsed)

			})

		}

	})


}





var fetchBookmark = (res, id) => {

	fetchBookmark.precond(id)





	var callback = sendBookmark.bind({ }, res, id)

	database.serialise(db => {

		// -- do a join to get all relevant information on bookmark.

		var sql = `
		SELECT bookmark.bookmarkId, bookmark.url, bookmark.ctime, url.status_code, url.is_soft_failer, url.title
		FROM bookmark, url, archive
		WHERE bookmarkId = ?;
		`

		db.all(sql, id, (err, rows) => {
			err ? callback(Err(err)) : callback(Ok(rows))
		})

	})

}

fetchBookmark.precond = id => {
	is.always.number(id)
}




module.exports = fetchBookmark
