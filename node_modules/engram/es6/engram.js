#!/usr/bin/env node

"use strict"





var log             = require('engram/es5/logger')

var is              = require('is')
var fs              = require('fs')
var http            = require('http')
var https           = require('https')
var express         = require('express')

var Result          = require('engram/es5/result').Result
var Ok              = require('engram/es5/result').Ok
var Err             = require('engram/es5/result').Err

var routes          = require('engram/es5/routes')
var database        = require('engram/es5/database')

var createTables    = require('engram/es5/create-tables')

var daemonStatus    = require('engram/es5/daemon-status')
var daemonSoftFail  = require('engram/es5/daemon-softfail')
var daemonTitle     = require('engram/es5/daemon-title')
var daemonArchive   = require('engram/es5/daemon-archive')

var startDaemons    = require('engram/es5/start-daemons')
var exitHandler     = require('engram/es5/exit-handler')





var loadCredentials = ( ) => {

	return {
		key:  fs.readFileSync('certs/key.pem', 'utf8').toString( ),
		cert: fs.readFileSync('certs/cert.pem', 'utf8').toString( )
	}

}









var startServer = (app, port, start, callback) => {

	callback( Result.of(( ) => {

		process.on('uncaughtException', exitHandler.bind({ }, true))

		app.http.use((req, res) => {

			var httpsURL = `https://${req.headers.host}${req.url}`

			log.global.info(`GET ${req.originalUrl}`)
			log.global.info(`redirecting ${req.originalUrl} -> ${httpsURL}`)

			res.redirect(httpsURL)
			res.end( )

		})

		app.https
		.use('/api', routes.api)
		.use('/',    routes.app)
		.use('/',    routes.save)
		.on('error', err => {

			var handled = {
				EADDRINUSE: `port ${port} currently in use`
			}

			handled.hasOwnProperty(err.code)
				? log.global.error(handled[err.code])
				: log.global.error(err.toString( ))

		})

		if (start) {


			var server = {
				http:  http.createServer(app.http),
				https: https.createServer(loadCredentials( ), app.https),
			}

			server.https.listen(port, 'localhost', ( ) => {
				log.global.info(`https engram listening on port ${port - 1}`)
			})

			server.http.listen(port + 1, 'localhost', ( ) => {
				log.global.info(`http engram listening on port ${port}`)
			})

		}

	}) )

}






/*
	the processes to keep running indefinitely. A single moniter checks each of these
	processes is responding. Each moniter manages its own task lifespans, and logging.

	current tasks:

*/

var daemons = {
//	status:   daemonStatus,
//	softFail: daemonSoftFail,
//	title:    daemonTitle,
//	archive:  daemonArchive
}





var engram = ({port, dbpath, start}) => {

	engram.precond(port, dbpath)

	start = is.boolean(start)
		? start
		: true

	global.DATABASE = dbpath





	var app = {
		http:  express( ),
		https: express( )
	}

	createTables(result => {

		// -- fatal error.
		if (result && result.isErr) {
			throw result.fromErr
		}

		return startServer(app, port, start, result => {

			// -- fatal error.
			if (result && result.isErr) {
				throw result.fromErr
			}

			startDaemons(daemons)

  		})

	})

	return app

}

engram.precond = (port, dbpath) => {
	is.always.string(dbpath)
}




module.exports = engram
