#!/usr/bin/env node

"use strict"





var is            = require('is')
var log           = require('engram/logger')

var Result        = require('engram/result').Result
var Ok            = require('engram/result').Ok
var Err           = require('engram/result').Err





/*
	start(manager, reporter, state)
*/

var start = (manager, reporter, state) => {

	start.precond(manager, reporter, state)

	var reporter2 = (args, state) => {

		reporter2.precond(args, state)
		manager(recall, reporter(args, state))

	}

	reporter2.precond = (args, state) => {
		is.always.object(state)
	}

	var recall = (args, timeout) => {

		recall.precond(args, timeout)
		setTimeout(reporter2.bind({ }, args, state), timeout)

	}

	recall.precond = (args, timeout) => {

		is.always.number(timeout, val => {
			return JSON.stringify(val)
		})

		if (timeout !== timeout || timeout === 0) {
			throw Error('invalid value for timeout.')
		}

	}

	manager(recall, state)

}

start.precond = (manager, reporter, state) => {

	is.always.function(manager,  'manager', JSON.stringify)
	is.always.function(reporter, 'reporter', JSON.stringify)
	is.always.object(state,      'state')

}





/*
	wrapReporter(reporter)

	wrap a reporter function in a second function.
*/

var wrapReporter = (fn, reporter) => {

	wrapReporter.precond(fn, reporter)

	return (args, state) => {

		fn(args, state)
		return reporter(args, state)

	}

}

wrapReporter.precond = (fn, reporter) => {

	is.always.function(fn, JSON.stringify)
	is.always.function(reporter, JSON.stringify)

}









module.exports = {
	start,
	wrapReporter
}
