#!/usr/bin/env node

"use strict"





var Result   = require('engram/result').Result
var Ok       = require('engram/result').Ok
var Err      = require('engram/result').Err

var mimetype = require('engram/mimetype')

//var phantom  = require('phantom')
var $        = require('cheerio')
var log      = require('engram/logger')





var headers = {
	headers: {
		'User-Agent': 'Mozilla/5.0 (Windows NT 6.0) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.43 Safari/537.31'
	}
}



var extractResourceName = uri => {
	return 'extracting resource name'
}

var getDomainName = uri => {

}

var chooseBestTitle = (url, titles) => {

}





var extractTitle = (url, {body, res}, callback) => {

	var contentType = res.headers['content-type']
	var parsed      = mimetype.parse(contentType)

	parsed.onErr(err => {
		log.warn({contentType, err, url}, 'content-type parsing failed.')
	})

	parsed.onOk(contentType => {

		if (mimetype.isHTML(contentType)) {

			extractTitle.html.js(url, res, callback)

		} else if (mimetype.isPDF(contentType)) {

			extractTitle.pdf(url, res, callback)

		} else {

			callback(extractResourceName(url))

		}

	})

}





extractTitle.html = (url, res, callback) => {
	extractTitle.html.js(url, res, callback)
}






extractTitle.html.js = (url, res, callback) => {

	var $html = $(res.body)

	var extractTagInfo = tagName => {

		var $tag = $html.find(tagName)

		if ($tag.length === 0) {
			return [ ]
		} else if ($tag.length === 1) {

			return [{
				text:        $tag.text( ).trim( ),
				'font-size': -1
			}]

		} else {

			return $tag.map( ({ith, elem}) => {
				return {
					text:        $(elem).text( ).trim( ),
					'font-size': -1
				}
			})
			.get( )

		}

	}

	callback(['title', 'h1'].map(extractTagInfo))

}





extractTitle.html.phantom = (url, res, callback) => {

	var titleResult = Result.of(( ) => {

		phantom.create(ph => {
			ph.createPage(page => {

				page.open(url, headers, processPage.bind({ }, ph))

				page.onResourceError = err => {
					extractTitle.html.js(url, res, callback)
				}

			})
		})

	})

	titleResult.onErr(err => {

		log.warn({err, url}, 'phantom-based title extraction failed.')
		extractTitle.html.js(url, res, callback)

	})

}





extractTitle.pdf = (url, res, callback) => {

}





module.exports = extractTitle
