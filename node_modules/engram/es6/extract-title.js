#!/usr/bin/env node

"use strict"





var log              = require('engram/logger')

var Result           = require('engram/result').Result
var Ok               = require('engram/result').Ok
var Err              = require('engram/result').Err

var parseContentType = require('content-type').parse
var contentTypes     = require('engram/content-types')

var requestURL       = require('engram/request-url')

var $                = require('cheerio')
var path             = require('path')
var URL              = require('url')





var headers = {
	headers: {
		'User-Agent': 'Mozilla/5.0 (Windows NT 6.0) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.43 Safari/537.31'
	}
}



var extractResourceName = uri => {
	return path.basename(URL.parse(uri).pathname)
}

var chooseBestTitle = (url, titles) => {

	var fallback = {
		tag:         undefined,
		text:        URL.parse(url).hostname,
		'font-size': -1
	}

	return titles
		.concat([fallback])
		.filter(title => {
			return title.text.length > 0
		})
		[0]
		.text

}






var extractTitle = (url, callback) => {

	requestURL(url, {encoding: null}, resResult => {

		resResult.onErr(err => {
			callback(Err(err))
		})

		resResult.onOk( ({res, body}) => {

			var contentType = res.headers['content-type'] || 'text/html'
			var parsed      = Result.of(( ) => parseContentType(contentType))

			parsed.onErr(err => {

				log.warn({
					contentType,
					message: err.message,
					stack:   err.stack,
					url
				}, 'content-type parsing failed.')

			})

			parsed.onOk(contentType => {

				if (contentTypes.isHTML(contentType)) {

					extractTitle.html(url, res, callback)

				} else if (contentTypes.isPDF(contentType)) {

					extractTitle.pdf(url, res, callback)

				} else {

					callback( Ok(extractResourceName(url)) )

				}

			})

		})

	})

}





extractTitle.html = (url, res, callback) => {

	var $html = $(res.body.toString('utf8'))

	var extractTagInfo = tagName => {

		var $tag = $html.find(tagName)

		if ($tag.length === 0) {
			return [ ]
		} else if ($tag.length === 1) {

			return [{
				tag:         tagName,
				text:        $tag.text( ).trim( ),
				'font-size': -1
			}]

		} else {

			return $tag.map( ({ith, elem}) => {
				return {
					tag:         tagName,
					text:        $(elem).text( ).trim( ),
					'font-size': -1
				}
			})
			.get( )

		}

	}

	var titles = [ ]

	;['title', 'h1'].forEach(tagName => {
		titles = titles.concat(extractTagInfo(tagName))
	})

	callback( Ok(chooseBestTitle(url, titles)) )

}





extractTitle.pdf = (url, res, callback) => {

}





module.exports = extractTitle
