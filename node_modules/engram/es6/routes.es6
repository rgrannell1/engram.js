#!/usr/bin/env node

"use strict"





var log           = require('engram/logger')


var Result        = require('engram/result').Result
var Ok            = require('engram/result').Ok
var Err           = require('engram/result').Err

var is            = require('is')
var express       = require('express')

var saveBookmark  = require('engram/save-bookmark')
var showBookmarks = require('engram/show-bookmarks')
var URL           = require('url')

var exitHandler   = require('engram/exit-handler')
var mustache      = require('mustache')










var api = express.Router( )
var app = express.Router( )





var process = {
	id: id => {

		return Ok(id)
			.then(num => {
				return parseInt(num, 10)
			})
			.then(num => {
				return num < 0
					? Err(422)
					: num
			})
			.then(num => {
				return num > 1000000
					? Err(422)
					: num
			})

	},
	amount: amount => {

		return Ok(amount)
			.then(num => {
				return parseInt(num, 10)
			})
			.then(num => {
				return num < 0
					? Err(422)
					: num
			})
			.then(num => {
				return num > 1000000
					? Err(422)
					: num
			})

	}
}





api.get('/api/bookmarks', (req, res, next) => {

	var maxID  = process.id(req.params.max_id)
	var amount = process.amount(req.params.amount)

	fetchBookmarks(maxID, amount, res)

})





var parseURL = url => {

	return Result.of(( ) => {

		var parsed = URL.parse(url)

		if (!is.string(parsed.protocol)) {
			parsed.protocol = 'http:'
			parsed.slashes  = true
		}

		return URL.format(parsed)

	})

}

app.get('/', (req, res) => {
	res.redirect('/bookmarks')
})

app.get('/bookmarks', (req, res) => {

	res.send(showBookmarks( ))
	res.status(200)

	res.contentType = 'text/html; charset=utf8'

	res.end( )

})

app.use(express.static('public'))






app.get('/favico.ico', (req, res) => {

	res.status(404)
	res.end( )

})

app.get('/import', (req, res) => {

})

app.get('/export', (req, res) => {

})





app.get('/*', (req, res) => {

	var pathResult = Ok(req)
		.then(req => req.url)
		.then(url => url.slice(1))
		.then(parseURL)

	pathResult.onOk(path => {

		log.info({url: req.url}, `GET ${path}`)

		saveBookmark(path, new Date( ).getTime( ), {req, res})
		res.status(204)
		res.contentType('text/html; charset=utf8')

		res.end( )

	})

	pathResult.onErr(path => {

		log.error({url: req.url}, `failed to save url`)

		res.status(404)
		res.end( )

	})

})



module.exports = {
	api,
	app
}
