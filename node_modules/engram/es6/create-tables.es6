#!/usr/bin/env node

"use strict"





var log          = require('engram/logger')
var is           = require('is')

var database     = require('engram/database')
var createTables = require('engram/create-tables')

var Result          = require('engram/result').Result
var Ok              = require('engram/result').Ok
var Err             = require('engram/result').Err





var statements = [
	`
	CREATE TABLE IF NOT EXISTS archive_content (

		archive_id     integer    PRIMARY KEY    AUTOINCREMENT,

		content_id     integer    REFERENCES content(content_id),
		type_id        integer    REFERENCES type(type_id),

		ctime          integer    NOT NULL       REFERENCES time(time),
		mtime          integer    NOT NULL       REFERENCES time(time)

	);`,




	`
	CREATE TABLE IF NOT EXISTS content (

		content_id    integer    PRIMARY KEY    AUTOINCREMENT,

		type_id       integer    REFERENCES     type(type_id),
		content       text       NOT NULL,

		ctime         integer    NOT NULL       REFERENCES time(time),
		mtime         integer    NOT NULL       REFERENCES time(time)

	);`,




	`
	CREATE TABLE IF NOT EXISTS type (

		type_id    integer    PRIMARY KEY    AUTOINCREMENT,

		type       text     UNIQUE           CHECK(length(type) > 0)

	);`,




	`
	CREATE TABLE IF NOT EXISTS time (

		time    integer    PRIMARY KEY    AUTOINCREMENT    CHECK(time > 0 and time <= 4294967295)

	);`,




	`
	CREATE TABLE IF NOT EXISTS url_archive (

		url_id        integer    REFERENCES url(url_id),
		archive_id    integer    REFERENCES archive(archive_id),

		PRIMARY KEY (url_id, archive_id)

	);`,




	`
	CREATE TABLE IF NOT EXISTS url_content (

		url_id        integer    REFERENCES url(url_id),
		content_id    integer    REFERENCES content(content_id),

		PRIMARY KEY (url_id, content_id)

	);`,




	`
	CREATE TABLE IF NOT EXISTS url (

		url_id    integer    PRIMARY KEY    AUTOINCREMENT,

		url       text       UNIQUE         CHECK(length(url) > 0),

		ctime     integer    NOT NULL       REFERENCES time(time),
		mtime     integer    NOT NULL       REFERENCES time(time)


	);`,




	`
	CREATE TABLE IF NOT EXISTS url_title (

		url_id      integer    REFERENCES url(url_id),
		title_id    integer    REFERENCES title(title_id),

		PRIMARY KEY (url_id, title_id)

	);`,




	`
	CREATE TABLE IF NOT EXISTS title (

		title_id    integer    PRIMARY KEY    AUTOINCREMENT,

		title       text       NOT NULL       CHECK(length(title) > 0),

		ctime     integer      NOT NULL       REFERENCES time(time),
		mtime     integer      NOT NULL       REFERENCES time(time)

	);`,




	`
	CREATE TABLE IF NOT EXISTS bookmark (

		bookmark_id    integer    PRIMARY KEY    AUTOINCREMENT,

		url_id         integer    NOT NULL       REFERENCES url(url_id),

		ctime         integer     NOT NULL       REFERENCES time(time),
		mtime         integer     NOT NULL       REFERENCES time(time)

	);`,




	`
	CREATE TABLE IF NOT EXISTS status (

		status_id    integer    PRIMARY KEY,
		code         integer    NOT NULL    CHECK(code > 0 and code < 600),

		ctime        integer    NOT NULL       REFERENCES time(time),
		mtime        integer    NOT NULL       REFERENCES time(time)

	);`,




	`
	CREATE TABLE IF NOT EXISTS url_status (

		url_id         integer    NOT NULL       REFERENCES url(url_id),
		status_id      integer    NOT NULL       REFERENCES status(status_id),

		PRIMARY KEY (url_id, status_id)


	);`

]





var createTables = callback => {

	database.do(
		(db, callback) => {

			statements.forEach(sql => {

				log.info({sql}, 'creating table.')
				db.run(sql, err => {

					if (err) {
						callback(Err(err))
					}

				})

			})

			// -- horrible! not running serially! need to await result of each callback.
			setTimeout(callback, 1000)

		},
		callback
	)

}





module.exports = createTables
