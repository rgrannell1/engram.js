#!/usr/bin/env node

"use strict"





var log             = require('engram/logger')


var Ok              = require('engram/result').Ok
var Err             = require('engram/result').Err
var Result          = require('engram/result').Result

var is              = require('is')
var URL             = require('url')
var express         = require('express')
var bodyParser      = require('body-parser')

var saveBookmark    = require('engram/save-bookmark')
var showBookmarks   = require('engram/show-bookmarks')

var fetchBookmarks  = require('engram/fetch-bookmarks')
var fetchArchive    = require('engram/fetch-archive')

var deleteBookmark  = require('engram/delete-bookmark')

var importBookmarks = require('engram/import-bookmarks')










var api  = express.Router( )





var routes = {
	get:    { },
	post:   { },
	delete: { }
}





var preprocess = {
	id: id => {

		return Ok(id)
			.then(num => {
				return parseInt(num, 10)
			})
			.then(num => {
				return num !== num  ? Err(422) : num
			})
			.then(num => {
				return num < 0      ? Err(422) : num
			})
			.then(num => {
				return num > 1000000 ? Err(422) : num
			})

	},
	amount: amount => {

		return Ok(amount)
			.then(num => {
				return parseInt(num, 10)
			})
			.then(num => {
				return num !== num   ? Err(422) : num

			})
			.then(num => {
				return num < 0       ? Err(422) : num
			})
			.then(num => {
				return num > 1000000 ? Err(422) : num
			})

	},
	bookmarks: bookmarks => {

		return Ok(bookmarks)
			.then(bookmarks => {
				return is.object(bookmarks)      ? bookmarks : Err(422)
			})
			.then(bookmarks => {
				return is.object(bookmarks.data) ? bookmarks : Err(422)
			})

	}
}





routes.get['/bookmarks'] = (req, res) => {

	var maxIdResult  = preprocess.id(req.query.max_id)
	var amountResult = preprocess.amount(req.query.amount)

	Ok([maxIdResult, amountResult]).productOf( )
	.then(pair => {

		fetchBookmarks(pair[0], pair[1], res)

	})

}

routes.get['/bookmarks/all'] = (req, res) => {

	fetchBookmarks(10000000, 10000000, res)

}






routes.get['/archive/:id'] = (req, res) => {

	log.info({id: req.params.id}, `GET /archive/${req.params.id}`)

	var idResult = preprocess.id(req.params.id)





	idResult.onErr(err => {

		res.status(500)
		res.end( )

	})

	idResult.onOk(
		fetchArchive.bind({ }, res))

}






routes.post['/import'] = (req, res) => {

	log.info('POST /import')

	var importResult = preprocess.bookmarks(req.body)





	importResult.onErr(code => {

		res.status(code)
		res.end( )

	})

	importResult.onOk(bookmarks => {

		importBookmarks(bookmarks, req, res)
		res.status(202)

		res.end( )

	})

}

routes.delete['/bookmarks/:id'] = (req, res) => {

	log.info({id: req.params.id}, `DELETE /api/bookmarks/${req.params.id}`)

	deleteBookmark(res, req.params.id)

}










api.get( '/bookmarks',        routes.get['/bookmarks'] )
api.get( '/bookmarks/all',    routes.get['/bookmarks/all'] )
api.get( '/archive/:id',      routes.get['/archive/:id'] )

api.delete( '/bookmarks/:id', routes.delete['/bookmarks/:id'] )

api.use( bodyParser.json({limit: '100mb'}) )

api.post('/import',           routes.post['/import'])





module.exports = api
