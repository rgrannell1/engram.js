#!/usr/bin/env node





var httpStatus = (code, message) => {
	return {code, message}
}





module.exports = {

	ok:                              httpStatus.bind({ }, 200),
	created:                         httpStatus.bind({ }, 201),
	accepted:                        httpStatus.bind({ }, 202),
	nonAuthoritativeInformation:     httpStatus.bind({ }, 203),
	noContent:                       httpStatus.bind({ }, 204),
	resetContent:                    httpStatus.bind({ }, 205),
	partialContent:                  httpStatus.bind({ }, 206),

	multipleChoices:                 httpStatus.bind({ }, 300),
	movedPermanently:                httpStatus.bind({ }, 301),
	found:                           httpStatus.bind({ }, 302),
	seeOther:                        httpStatus.bind({ }, 303),
	notModified:                     httpStatus.bind({ }, 304),
	useProxy:                        httpStatus.bind({ }, 305),
	temporaryRedirect:               httpStatus.bind({ }, 307),

	badRequest:                      httpStatus.bind({ }, 400),
	unauthorized:                    httpStatus.bind({ }, 401),
	paymentRequired:                 httpStatus.bind({ }, 402),
	forbidden:                       httpStatus.bind({ }, 403),
	notFound:                        httpStatus.bind({ }, 404),
	methodNotAllowed:                httpStatus.bind({ }, 405),
	notAcceptable:                   httpStatus.bind({ }, 406),
	proxyAuthenticationRequired:     httpStatus.bind({ }, 407),
	requestTimeout:                  httpStatus.bind({ }, 408),
	conflict:                        httpStatus.bind({ }, 409),
	gone:                            httpStatus.bind({ }, 410),
	lengthRequired:                  httpStatus.bind({ }, 411),
	preconditionFailed:              httpStatus.bind({ }, 412),
	requestEntityTooLarge:           httpStatus.bind({ }, 413),
	requestURITooLong:               httpStatus.bind({ }, 414),
	unsupportedMediaType:            httpStatus.bind({ }, 415),
	requestedRangeNotSatisfiable:    httpStatus.bind({ }, 416),
	expectationFailed:               httpStatus.bind({ }, 417),
	unprocessableEntity:             httpStatus.bind({ }, 422),

	internalServerError:             httpStatus.bind({ }, 500),
	notImplemented:                  httpStatus.bind({ }, 501)

}