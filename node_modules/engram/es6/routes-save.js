#!/usr/bin/env node

"use strict"





var log                = require('engram/logger')

var Result             = require('engram/result').Result
var Ok                 = require('engram/result').Ok
var Err                = require('engram/result').Err

var is                 = require('is')
var express            = require('express')

var saveBookmark       = require('engram/save-bookmark')

var URL                = require('url')
var stats              = require('engram/stats')
var validURL           = require('valid-url')

var saveArchive        = require('engram/save-archive')
var saveSoftFailStatus = require('engram/save-softfail')
var saveStatus         = require('engram/save-status')
var saveTitle          = require('engram/save-title')

var constants          = require('engram/constants')
var message            = require('engram/message')

var requestURL         = require('engram/request-url')









var save = express.Router({
	strict:      true,
	mergeParams: true
})





var parseURL = url => {

	return Result.of(( ) => {

		var parsed = URL.parse(url)

		if (!is.string(parsed.protocol)) {
			url = 'http://' + url
		}


		return validURL.is_web_uri(url)
			? Ok(url)
			: Err(url)

	})

}






save.use((req, res) => {

	var pathResult = Ok(req)
		.then(req => req.url)
		.then(url => url.slice(1))
		.then(parseURL)

	pathResult.onErr(path => {

		log.global.error({url: req.url}, `failed to save url`)

		res.status(404)
		res.end( )

	})

	pathResult.onOk(url => {

		log.global.info({url: req.url}, `GET /${url}`)

		var time = Math.round(new Date( ).getTime( ) / 1000)

		constants.BUS.fire(message.URL_REQUESTED, {
			url,
			time,
			res
		})
	})

})





constants.BUS.on(message.URL_REQUESTED, ({url, time, res}) => {

	saveBookmark(url, time, result => {

		result.onErr(err => {

			log.global.error({
				message: err.message,
				stack:   err.stack
			}, `failed to save ${url}`)

			if (res) {

				res.status(500)
				res.send(`whoops! ${url} failed.`)
				res.end( )

			}

		})

		result.onOk(( ) => {

			if (res) {
				res.status(204)
				res.end( )
			}

			requestURL(url, {encoding: null}, reqResult => {

				reqResult.onErr( err => {
					log.global.error({message: err.message, stack: err.stack})
				})

				reqResult.onOk( ({res, body}) => {


					saveStatus({url, res, body}, res => {
						constants.BUS.fire(message.STATUS_FINISHED, res)
					})

					saveTitle({url, res, body}, res => {
						constants.BUS.fire(message.TITLE_FINISHED, res)
					})


					saveSoftFailStatus({url, res, body}, res => {
						constants.BUS.fire(message.SOFTFAIL_FINISHED, res)
					})

					saveArchive({url, res, body}, res => {
						constants.BUS.fire(message.ARCHIVE_FINISHED, res)
					})


				})

			})

		})

	})

})





module.exports = save

