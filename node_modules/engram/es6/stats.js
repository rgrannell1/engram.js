#!/usr/bin/env node

"use strict"





var is        = require('is')
var log       = require('engram/es5/logger')
var utils     = require('engram/es5/utils')

var constants = require('engram/es5/constants')
var message   = require('engram/es5/message')





{
	let amount = 0
	let startTime
	let lastTime

	constants.BUS.on(message.URL_RESOLVED, ( ) => {

		if (is.undefined(startTime)) {
			startTime = (new Date( )).getTime( )
		}

		lastTime = (new Date( )).getTime( )
		amount++

		var rate = (amount / ((lastTime - startTime) / 1000), 2).toFixed(2)

		if (isFinite(rate)) {
			log.stats.info({value: rate}, `μ bookmarks per second.`)
		}

	})

}




{

	let totalTime = 0
	let amount    = 0

	constants.BUS.on(message.URL_RESOLVED, urlResult => {

		urlResult.onOk( ({res, body}) => {

			amount++
			totalTime += (res.requestTime || 0)

		})

		var averageTime = (totalTime / amount).toFixed(2)

		log.stats.info({value: averageTime}, `μ seconds per request.`)

	})

}





{

	let failed     = 0
	let succeeded  = 0

	constants.BUS.on(message.URL_RESOLVED, urlResult => {

		urlResult.onOk (( ) => ++succeeded)
		urlResult.onErr(( ) => ++failed)

		var averageRate = (succeeded / (failed + succeeded)).toFixed(2)

		log.stats.info({failed, succeeded, value: averageRate}, `μ url success rate.`)

	})

}





// -- security-related statistics

{

	var ips = [ ]

	constants.BUS.on(message.USER_RESOLVED, req => {

		var ipResult = utils.getIpAddress(req)

		ipResult.onOk(ip => {

			if (ips.indexOf(ip) === -1) {
				ips.push(ip)
			}

			log.stats.debug({ips}, 'served addresses.')

		})

		// -- probably never going to be called.
		ipResult.onErr(err => {
			log.global.error({err}, 'could not extract ip address.')
		})

	})

}
