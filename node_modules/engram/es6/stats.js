#!/usr/bin/env node

"use strict"





var is        = require('is')
var log       = require('engram/logger')

var Result    = require('engram/result').Result
var Ok        = require('engram/result').Ok
var Err       = require('engram/result').Err

var constants = require('engram/constants')
var message   = require('engram/message')

var statsLog  = log.child({system: 'stats'})





{
	let amount = 0
	let startTime;
	let lastTime;

	constants.BUS.on(message.URL_RESOLVED, saveResult => {

		if (is.undefined(startTime)) {
			startTime = new Date( ).getTime( )
		}

		lastTime = new Date( ).getTime( )
		++amount

		var rate = amount / ((lastTime - startTime) / 1000)

		statsLog.info(`current rate: ${rate}`)

	})

}





constants.BUS.on(message.TITLE_FINISHED, saveResult => {

	saveResult.onErr(err => {
		statsLog.error({message: err.message, stack: err.stack}, 'title extraction failed.')
	})

	saveResult.onOk(url => {

		if (!is.undefined(url)) {
			statsLog.info(`successfully extracted title for ${url}`)
		}

	})

})

constants.BUS.on(message.SOFTFAIL_FINISHED, saveResult => {

	saveResult.onErr(err => {
		statsLog.error({message: err.message, stack: err.stack}, 'soft-fail determination failed.')
	})

	saveResult.onOk(url => {

		if (!is.undefined(url)) {
			statsLog.info(`successfully determinated soft-fail status for ${url}`)
		}

	})

})

constants.BUS.on(message.STATUS_FINISHED, saveResult => {

	saveResult.onErr(err => {
		statsLog.error({message: err.message, stack: err.stack}, 'status determination failed.')
	})

	saveResult.onOk(url => {

		if (!is.undefined(url)) {
			statsLog.info(`successfully determinated fail status for ${url}`)
		}

	})

})

constants.BUS.on(message.ARCHIVE_FINISHED, archiveResult => {

	archiveResult.onErr(err => {
		statsLog.error({message: err.message, stack: err.stack}, 'status determination failed.')
	})

	archiveResult.onOk(url => {

		if (!is.undefined(url)) {
			statsLog.info(`successfully saved archive for ${url}`)
		}

	})

})
