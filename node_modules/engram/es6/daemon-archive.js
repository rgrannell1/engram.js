#!/usr/bin/env node

"use strict"




var is           = require('is')
var log          = require('engram/logger')

var Result       = require('engram/result').Result
var Ok           = require('engram/result').Ok
var Err          = require('engram/result').Err

var requestURL   = require('engram/request-url')
var database     = require('engram/database')
var constants    = require('engram/constants')

var saveArchive  = require('engram/save-archive')





/*
	findUnresolvedURL(callback)

	select the URLS that don't have a status code.
*/

var findUnarchivedURL = callback => {

	var sql = `
	SELECT url FROM archive
	WHERE content is NULL or content_type is NULL

	ORDER BY RANDOM()
	LIMIT 1;
	`

	database.serialise(db => {

		db.all(sql, (err, rows) => {
			err ? callback(Err(err)) : callback(Ok(rows))
		})

	})


}





/*
	save a single unresolved URL to the database before reporting.
*/

var job = reporter => {

	var onURL = urlResult => {

		urlResult.onErr(errData => {
			reporter(Err(errData))
		})

		urlResult.onOk(saveArchive.bind({ }, reporter))

	}

	onURL.precond = urlResult => {
		is.always.object(urlResult)
	}

	findUnarchivedURL(onURL)

}





/*
	report whether a url was found or not.
*/

var reporter = urlResult => {

	reporter.precond(urlResult)

	constants.BUS.fire(':archive', urlResult)

}

reporter.precond = urlResult => {
	is.always.object(urlResult)
}





module.exports = {
	reporter,
	job,
	interval: 15 * 1000
}
