#!/usr/bin/env node

"use strict"





var Ok           = require('engram/es5/result').Ok
var Err          = require('engram/es5/result').Err

var requestURL   = require('engram/es5/request-url')
var URL          = require('url')

var database     = require('engram/es5/database')





/*
	updateSoftFail(url, isSoftFailer, callback)

	set the soft-fail status for a URL.
*/

var updateSoftFail = (url, isSoftFailer, callback) => {

	var sql = `UPDATE url SET is_soft_failer=$isSoftFailer WHERE url.url = $url`

	database.serialise(db => {

		db.run(sql, {
			$url:          url,
			$isSoftFailer: isSoftFailer
		}, err => {
			err ? callback(Err(err)) : callback(Ok(url))
		})

	})

}





var base64 = length => {

	var charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-'
	var string  = ''

	for (var ith = 0; ith < length; ++ith) {
		string += charset.charAt(Math.floor(Math.random( ) * 64))
	}

	return string

}





/*
	isSoftFailer(url, callback)

	does a URL fail with a 200-status? The algorithm used is
	described "Towards an understanding of the web decay."

	* if it succeeds, the page may not be dead.
	* if it redirects, follow ten non-looping steps before declaring dead.
	* if the page succeeds:
	      > create several fake URLs from the parent url.
	      > if (after redirecting) the random urls fail, our URL is valid! Otherwise, soft-failer.
	      > if random & ours redirect the same number of hops, soft failer! If ours if different,
	      ours might be alive.
	      > if, upon shingling, the contents out our URL is the same as outs, probably a soft-failure.
	      > can also look for '404' or 'not found in title', false positive.

*/

var isSoftFailer = ({url, res, body}, callback) => {
	// -- TODO

	requestURL(url, {encoding: null}, reqResult => {

		reqResult.onErr(err => {
			callback(Err(err))
		})

		reqResult.onOk( ({res, body}) => {

			callback(Ok(false)) // -- TODO!

		})

	})

}





var saveSoftFailStatus = ({url, res, body}, reporter) => {

	isSoftFailer({url, res, body}, statusResult => {

		statusResult.onErr(err => {
			reporter(Err(err))
		})

		statusResult.onOk(isSoftFailer => {
			updateSoftFail(url, isSoftFailer, reporter)
		})

	})

}






module.exports = saveSoftFailStatus
