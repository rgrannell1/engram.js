#!/usr/bin/env node

"use strict"





var log          = require('engram/logger')

var Result       = require('engram/result').Result
var Ok           = require('engram/result').Ok
var Err          = require('engram/result').Err

var requestURL   = require('engram/request-url')
var database     = require('engram/database')





/*
	findUnresolvedURL(callback)

	select the URLS that don't have a status code.
*/

var findUnresolvedURL = callback => {

	var sql = `
	SELECT * FROM url

	WHERE url.status_code is NULL

	LIMIT 1;
	`

	database.do((db, callback) => {

		db.all(sql, (err, rows) => {
			err ? callback(Err(err)) : callback(Ok(rows))
		})

	}, callback)


}






/*
	updateStatus(url, statusCode, callback)

	set the status code for a URL.

*/

var updateStatus = (url, statusCode, callback) => {

	var sql = `UPDATE url SET status_code=$statusCode WHERE url.url = $url`

	database.do((db, callback) => {

		db.run(sql, {
			$url:        url,
			$statusCode: statusCode
		})

	}, callback)

}





/*
	saveStatus(recall, state, url)

	request a URL, and save it's to the database.
*/

var saveStatus = (recall, state, url) => {

	url.length === 0
		? recall(undefined, state.control.delay)
		: requestURL(url[0].url, { }, urlResult => {

			urlResult.onErr(err => {
				recall(Err(err), state.control.delay)
			})

			urlResult.onOk( ({res, body}) => {

				updateStatus(url, res.statusCode, result => {
					recall(Ok(url), state.control.delay)
				})

			})

		})

}





/*
	save a single unresolved URL to the database before recalling.
*/

var moniter = (recall, state) => {

	findUnresolvedURL(urlResult => {

		urlResult.onErr(err => {
			recall(Err(err), state.control.delay)
		})

		urlResult.onOk(saveStatus.bind({ }, recall, state))

	})
}





/*
	report whether a url was found or not.
*/

var reporter = (urlResult, state) => {

	urlResult.onErr(err => {
		state.stats.failed += 1
	})

	urlResult.onOk(url => {

		if (url.length === 0){
			state.stats.noURL    += 1
		} else {
			state.stats.urlFound += 1
		}

	})

	return state
}






var state = {
	control: {
		delay: 10 * 1000
	},
	stats: {
		noURL:    0,
		urlFound: 0,
		failed:   0
	}
}

// -- TODO really want random! url from DB, otherwise an error will block forever.








module.exports = {
	reporter,
	moniter,
	state
}
