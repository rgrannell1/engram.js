#!/usr/bin/env node

"use strict"




var is           = require('is')
var log          = require('engram/logger')

var Result       = require('engram/result').Result
var Ok           = require('engram/result').Ok
var Err          = require('engram/result').Err

var requestURL   = require('engram/request-url')
var database     = require('engram/database')






/*
	findUnresolvedURL(callback)

	select the URLS that don't have a status code.
*/

var findUnresolvedURL = callback => {

	var sql = `
	SELECT * FROM url

	WHERE url.status_code is NULL

	ORDER BY RANDOM()
	LIMIT 1;
	`

	database.do((db, callback) => {

		db.all(sql, (err, rows) => {
			err ? callback(Err(err)) : callback(Ok(rows))
		})

	}, callback)


}






/*
	updateStatus(url, statusCode, callback)

	set the status code for a URL.

*/

var updateStatus = (url, statusCode, callback) => {

	updateStatus.precond(url, statusCode, callback)




	var sql = `UPDATE url SET status_code=$statusCode WHERE url = $url`

	database.do((db, callback) => {

		db.run(sql, {
			$url:        url,
			$statusCode: statusCode
		}, err => {
			err ? callback(Err(err)) : callback(Ok(url))
		})

	}, callback)

}

updateStatus.precond = (url, statusCode, callback) => {

	is.always.string(url)

}





/*
	saveStatus(reporter, url)

	request a URL, and save it's to the database.
*/

var saveStatus = (reporter, urls) => {

	saveStatus.precond(reporter, urls)

	var onURL = reqResult => {

		onURL.precond(reqResult)

		reqResult.onErr( errData => {
			reporter(Err(errData))
		})

		reqResult.onOk( ({res, body}) => {

			updateStatus(urls[0].url, res.statusCode, result => {
				reporter(Ok(urls[0].url))
			})

		})

	}

	onURL.precond = urlsResult => {
		is.always.object(urlsResult)
	}

	urls.length === 0
		? reporter( Ok([ ]) )
		: requestURL(urls[0].url, { }, onURL)

}

saveStatus.precond = (reporter, urls) => {
	is.always.function(reporter, val => {
		console.log(val)
	})
	is.always.array(urls)
}






module.exports = saveStatus
