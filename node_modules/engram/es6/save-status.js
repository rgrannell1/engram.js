#!/usr/bin/env node

"use strict"




var is           = require('is')
var log          = require('engram/logger')

var Result       = require('engram/result').Result
var Ok           = require('engram/result').Ok
var Err          = require('engram/result').Err

var requestURL   = require('engram/request-url')
var database     = require('engram/database')

/*
	findUnresolvedURL(callback)

	select the URLS that don't have a status code.
*/

var findUnresolvedURL = callback => {

	var sql = `
	SELECT * FROM url

	WHERE url.status_code is NULL

	ORDER BY RANDOM()
	LIMIT 1;
	`

	database.serialise(db => {

		db.all(sql, (err, rows) => {
			err ? callback(Err(err)) : callback(Ok(rows))
		})

	})


}






/*
	updateStatus(url, statusCode, callback)

	set the status code for a URL.

*/

var updateStatus = (url, statusCode, callback) => {

	updateStatus.precond(url, statusCode, callback)




	var sql = `UPDATE url SET status_code=$statusCode WHERE url = $url`

	database.serialise(db => {

		db.run(sql, {
			$url:        url,
			$statusCode: statusCode
		}, err => {
			err ? callback(Err(err)) : callback(Ok(url))
		})

	})

}

updateStatus.precond = (url, statusCode, callback) => {

	is.always.string(url)

}





/*
	saveStatus(reporter, url)

	request a URL, and save it's to the database.
*/

var saveStatus = ({url, res, body}, reporter) => {

	log.debug(`saving status for ${url}`)

	saveStatus.precond({url, res, body}, reporter)

	updateStatus(url, res.statusCode, result => {
		reporter(Ok(url))
	})

}

saveStatus.precond = ({url, res, body}, reporter) => {
	is.always.function(reporter)
}






module.exports = saveStatus
