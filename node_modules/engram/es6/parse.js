#!/usr/bin/env node

"use strict"



var is              = require('is')

var Ok              = require('engram/es5/result').Ok
var Err             = require('engram/es5/result').Err
var Result          = require('engram/es5/result').Result

var httpStatus = require('engram/es5/http-status')




var id = id => {

	return Ok(id)
		.then(id => {
			return parseInt(id, 10)
		})
		.then(id => {
			return id !== id  ?
				Err(httpStatus.unprocessableEntity(`${id} could not be parsed.`))
				: id
		})
		.then(id => {
			return id < 0      ?
				Err(httpStatus.unprocessableEntity(`${id} was less than zero.`))
				: id
		})
		.then(id => {
			return id > 1000000 ?
				Err(httpStatus.unprocessableEntity(`${id} was too large.`))
				: id
		})

}





var amount = amount => {

	return Ok(amount)
		.then(num => {
			return parseInt(num, 10)
		})
		.then(amount => {
			return amount !== amount  ?
				Err(httpStatus.unprocessableEntity(`${amount} could not be parsed.`))
				: amount
		})
		.then(amount => {
			return amount < 0      ?
				Err(httpStatus.unprocessableEntity(`${amount} was less than zero.`))
				: amount
		})
		.then(amount => {
			return amount > 1000000 ?
				Err(httpStatus.unprocessableEntity(`${amount} was too large.`))
				: amount
		})

}





var bookmarks = bookmarks => {

	return Ok(bookmarks)
	.then(bookmarks => {
		return is.object(bookmarks)
			? bookmarks
			: Err(httpStatus.unprocessableEntity(`bookmarks were not parsed`))
	})
	.then(bookmarks => {
		return is.object(bookmarks.data)
			? bookmarks
			: Err(httpStatus.unprocessableEntity(`bookmarks malformed`))
	})

}










module.exports = {
	id,
	amount,
	bookmarks
}
