#!/usr/bin/env node

"use strict"




var is           = require('is')
var log          = require('engram/logger')

var Result       = require('engram/result').Result
var Ok           = require('engram/result').Ok
var Err          = require('engram/result').Err

var requestURL   = require('engram/request-url')
var database     = require('engram/database')






/*
	findUnresolvedURL(callback)

	select the URLS that don't have a status code.
*/

var findUnresolvedURL = callback => {

	var sql = `
	SELECT * FROM url

	WHERE url.status_code is NULL

	ORDER BY RANDOM()
	LIMIT 1;
	`

	database.do((db, callback) => {

		db.all(sql, (err, rows) => {
			err ? callback(Err(err)) : callback(Ok(rows))
		})

	}, callback)


}






/*
	updateStatus(url, statusCode, callback)

	set the status code for a URL.

*/

var updateStatus = (url, statusCode, callback) => {

	updateStatus.precond(url, statusCode, callback)




	var sql = `UPDATE url SET status_code=$statusCode WHERE url = $url`

	database.do((db, callback) => {

		db.run(sql, {
			$url:        url,
			$statusCode: statusCode
		})

	}, callback)

}

updateStatus.precond = (url, statusCode, callback) => {

	is.always.string(url)

}





/*
	saveStatus(recall, state, url)

	request a URL, and save it's to the database.
*/

var saveStatus = (recall, state, urls) => {

	saveStatus.precond(recall, state, urls)

	var onURL = reqResult => {

		onURL.precond(reqResult)

		reqResult.onErr( errData => {
			recall(Err(errData), state.control.delay)
		})

		reqResult.onOk( ({res, body}) => {

			updateStatus(urls[0].url, res.statusCode, result => {
				recall(Ok(urls[0].url), state.control.delay)
			})

		})

	}

	onURL.precond = urlsResult => {
		is.always.object(urlsResult)
	}



	urls.length === 0
		? recall(Ok([ ]), state.control.delay)
		: requestURL(urls[0].url, { }, onURL)

}

saveStatus.precond = (recall, state, urls) => {
	is.always.array(urls)
}




/*
	save a single unresolved URL to the database before recalling.
*/

var moniter = (recall, state) => {

	var onURL = urlResult => {

		urlResult.onErr(errData => {
			recall(Err(errData), state.control.delay)
		})

		urlResult.onOk(saveStatus.bind({ }, recall, state))

	}

	onURL.precond = urlResult => {
		is.always.object(urlResult)
	}





	findUnresolvedURL(onURL)

}





/*
	report whether a url was found or not.
*/

var reporter = (urlResult, state) => {

	reporter.precond(urlResult, state)

	urlResult.onErr( ({url, err}) => {
		state.stats.fails.push(url)
	})

	urlResult.onOk(url => {

		log.info(url)

		if (url.length === 0){
			state.stats.noURL += 1
		} else {
			state.stats.found.push(url)
		}

	})

	return state
}

reporter.precond = (urlResult, state) => {

	is.always.object(urlResult)
	is.always.object(state)

}






var state = {
	control: {
		delay: 10 * 1000
	},
	stats: {
		noURL: 0,
		found: [ ],
		fails: [ ]
	}
}

// -- TODO really want random! url from DB, otherwise an error will block forever.
// -- need a unique identified for each reporter -> manager -> loop, to maintain
// -- singleton.







module.exports = {
	reporter,
	moniter,
	state,
	timeout: 5 * 60 * 1000
}
