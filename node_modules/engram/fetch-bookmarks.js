#!/usr/bin/env node
"use strict";

var log = require("engram/logger");

var is = require("is");
var https = require("https");
var express = require("express");
var bunyan = require("bunyan");

var Result = require("engram/result").Result;
var Ok = require("engram/result").Ok;
var Err = require("engram/result").Err;

var routes = require("engram/routes");
var database = require("engram/database");
var bookmark = require("engram/bookmark");

var exitHandler = require("engram/exit-handler");

var parseBookmarks = function (rows) {

	var bookmarkResults = rows.map(function (row) {
		return bookmark.bookmark(row);
	});

	var fails = bookmarkResults.filter(function (res) {
		return res.isErr;
	});
	var oks = bookmarkResults.filter(function (res) {
		return res.isOk;
	});

	if (fails.length > 0) {
		logger.warning({ fails: JSON.stringify(fails) }, "failed to reparse " + fails.length + " bookmarks.");
	}

	return Ok(oks).productOf();
};

var sendBookmarks = function (res, maxID, rowResult) {

	rowResult.onErr(function (err) {

		res.status(500);
		res.send(err.message);
	});

	rowResult.then(parseBookmarks).then(function (bookmarks) {

		var nextID = bookmarks.length > 0 ? bookmarks.reduce(function (bookmark0, bookmark1) {

			return bookmark.getID(bookmark1) < bookmark.getID(bookmark0) ? bookmark1 : bookmark0;
		}) : maxID + 1;

		var body = JSON.stringify({ data: bookmarks, next_id: nextID });

		console.log(body);

		res.status(200);

		res.contentType("application/json");
		res.send(body);
	});
};

var fetchBookmarks = function (maxID, amount, res) {

	fetchBookmarks.precond(maxID, amount);

	database["do"](function (db, callback) {

		var sql = "\n\t\tSELECT bookmark_id, url, title, ctime\n\t\tFROM bookmarks\n\t\tWHERE bookmark_id <= ?\n\t\tORDER BY bookmark_id DESC\n\t\tLIMIT ?\n\t\t";

		db.all(sql, maxID, amount, function (err, rows) {
			err ? callback(Err(err)) : callback(Ok(rows));
		});
	}, sendBookmarks.bind({}, res, maxID));
};

fetchBookmarks.precond = function (maxID, amount) {

	is.always.number(maxID);
	is.always.number(amount);
};

module.exports = fetchBookmarks;