#!/usr/bin/env node
"use strict";

var is = require("is");
var log = require("engram/logger");

var Result = require("engram/result").Result;
var Ok = require("engram/result").Ok;
var Err = require("engram/result").Err;

var requestURL = require("engram/request-url");
var database = require("engram/database");

/*
	findUnresolvedURL(callback)

	select the URLS that don't have a status code.
*/

var findUnresolvedURL = function (callback) {

	var sql = "\n\tSELECT * FROM url\n\n\tWHERE url.status_code is NULL\n\n\tORDER BY RANDOM()\n\tLIMIT 1;\n\t";

	database["do"](function (db, callback) {

		db.all(sql, function (err, rows) {
			err ? callback(Err(err)) : callback(Ok(rows));
		});
	}, callback);
};

/*
	updateStatus(url, statusCode, callback)

	set the status code for a URL.

*/

var updateStatus = function (url, statusCode, callback) {

	updateStatus.precond(url, statusCode, callback);

	var sql = "UPDATE url SET status_code=$statusCode WHERE url = $url";

	database["do"](function (db, callback) {

		db.run(sql, {
			$url: url,
			$statusCode: statusCode
		});
	}, callback);
};

updateStatus.precond = function (url, statusCode, callback) {

	is.always.string(url);
};

/*
	saveStatus(recall, state, url)

	request a URL, and save it's to the database.
*/

var saveStatus = function (recall, state, url) {

	var onURL = function (urlResult) {

		onURL.precond(urlResult);

		urlResult.onErr(function (errData) {
			recall(Err(errData), state.control.delay);
		});

		urlResult.onOk(function (_ref) {
			var res = _ref.res;
			var body = _ref.body;

			updateStatus(url, res.statusCode, function (result) {
				recall(Ok(url), state.control.delay);
			});
		});
	};

	onURL.precond = function (urlResult) {
		is.always.object(urlResult);
	};

	url.length === 0 ? recall(Ok([]), state.control.delay) : requestURL(url[0].url, {}, onURL);
};

/*
	save a single unresolved URL to the database before recalling.
*/

var moniter = function (recall, state) {

	var onURL = function (urlResult) {

		urlResult.onErr(function (errData) {
			recall(Err(errData), state.control.delay);
		});

		urlResult.onOk(saveStatus.bind({}, recall, state));
	};

	onURL.precond = function (urlResult) {
		is.always.object(urlResult);
	};

	findUnresolvedURL(onURL);
};

/*
	report whether a url was found or not.
*/

var reporter = function (urlResult, state) {

	reporter.precond(urlResult, state);

	urlResult.onErr(function (_ref) {
		var url = _ref.url;
		var err = _ref.err;

		state.stats.fails.push(url);
	});

	urlResult.onOk(function (url) {

		log.info(url);

		if (url.length === 0) {
			state.stats.noURL += 1;
		} else {
			state.stats.found.push(url);
		}
	});

	return state;
};

reporter.precond = function (urlResult, state) {

	is.always.object(urlResult);
	is.always.object(state);
};

var state = {
	control: {
		delay: 30 * 1000
	},
	stats: {
		noURL: 0,
		found: [],
		fails: []
	}
};

// -- TODO really want random! url from DB, otherwise an error will block forever.
// -- need a unique identified for each reporter -> manager -> loop, to maintain
// -- singleton.

module.exports = {
	reporter: reporter,
	moniter: moniter,
	state: state,
	timeout: 5 * 60 * 1000
};