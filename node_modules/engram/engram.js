#!/usr/bin/env node
"use strict";

var log = require("engram/logger");

try {

	var is = require("is");
	var https = require("https");
	var express = require("express");
	var bunyan = require("bunyan");

	var routes = require("engram/routes");
	var database = require("engram/database");
} catch (err) {

	log.fatal({
		message: err.message,
		stacK: err.stack }, "failed to load dependencies.");

	process.exit();
}

var createTables = function () {

	var statements = ["\n\t\tCREATE TABLE IF NOT EXISTS archives (\n\t\t\tarchive_id    integer     PRIMARY KEY    AUTOINCREMENT,\n\t\t\tcontent       blob        NOT NULL,\n\t\t\tmimetype      text        NOT NULL,\n\t\t\tctime         integer     NOT NULL\n\t\t);", "\n\t\tCREATE TABLE IF NOT EXISTS bookmarks (\n\t\t\tbookmark_id    integer    PRIMARY KEY    AUTOINCREMENT,\n\t\t\turl            text       NOT NULL,\n\t\t\ttitle          text       NOT NULL,\n\t\t\tctime          integer    NOT NULL\n\t\t);", "\n\t\tCREATE TABLE IF NOT EXISTS bookmark_archives (\n\t\t\tbookmark_archive_id    integer    PRIMARY KEY    AUTOINCREMENT,\n\t\t\tbookmark_id            REFERENCES bookmarks(bookmark_id),\n\t\t\tarchive_id             REFERENCES archives(archive_id)\n\t\t);"];

	statements.forEach(function (sql) {

		database["do"](function (db, callback) {

			log.info({ sql: sql }, "creating table.");
			db.run(sql);
		});
	});
};

var exitHandler = function (shouldExit, err) {

	if (err) {

		log.fatal({
			message: err.message,
			stack: err.stack
		}, "uncaught exception");
	}

	if (shouldExit) {

		try {

			database.close();
		} catch (err) {

			log.error({
				message: err.message,
				stack: err.stack
			}, "failed to close database connection.");
		}

		process.exit();
	}
};

var create = function (_ref) {
	var port = _ref.port;

	var app = express();

	app.listen(port, function () {
		log.info("engram listening on port " + port);
	}).on("error", function (err) {

		var handled = {
			EADDRINUSE: "port " + port + " currently in use"
		};

		err.code in handled ? log.error(handled[err.code]) : log.error(err.toString());
	});

	createTables();

	app.use("/", routes.app).use("/api", routes.api);

	process.on("uncaughtException", exitHandler.bind({}, true));
	process.on("SIGINT", exitHandler.bind({}, true));
	process.on("exit", exitHandler.bind({}, false));
};

create({
	port: 5000
});
