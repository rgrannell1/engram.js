#!/usr/bin/env node
"use strict";

var log = require("engram/logger");

var Result = require("engram/result").Result;
var Ok = require("engram/result").Ok;
var Err = require("engram/result").Err;

var is = require("is");

var extractTitle = require("engram/extract-title");
var createArchive = require("engram/create-archive");
var log = require("engram/logger");
var database = require("engram/database");

var requestURL = require("engram/request-url");

var findTitlelessURLs = function (callback) {

	var sql = "\n\tSELECT * FROM url\n\n\tWHERE url.title is NULL\n\n\tAND url.is_soft_failer == 0\n\tAND url.status_code NOT IN (403, 404, 410)\n\tAND url.status_code < 500;\n\t";
	database["do"](function (db, callback) {

		db.all(sql, function (err, rows) {
			err ? callback(Err(err)) : callback(Ok(rows));
		});
	}, callback);
};

var findUnresolvedURL = function (callback) {

	var sql = "\n\tSELECT * FROM url\n\n\tWHERE url.is_soft_failer is NULL\n\tOR url.status_code is NULL\n\n\tLIMIT 1;\n\t";

	database["do"](function (db, callback) {

		db.all(sql, function (err, rows) {
			err ? callback(Err(err)) : callback(Ok(rows));
		});
	}, callback);
};

var start = function (manager, reporter, state) {

	var reporter2 = function (args, state) {
		manager(reporter2, reporter(args, state));
	};

	manager(reporter2, state);
};

var insertStatus = function (url, statusCode, continuation) {

	var sql = "\n\tUPDATE url\n\tSET status_code=$statusCode\n\tWHERE url.url = $url\n\t";

	database["do"](function (db, callback) {

		db.run(sql, {
			$url: url,
			$statusCode: statusCode
		});
	}, continuation);
};

var statusManager = function (reporter, state) {

	findUnresolvedURL(function (urlResult) {

		urlResult.then(function (url) {

			url.length === 0 ? setTimeout(reporter.bind({}, url, state), state.control.delay) : url.map(function (_ref) {
				var url = _ref.url;

				requestURL(url, {}, function (err, res, body) {

					insertStatus(url, res.statusCode, function (insertResult) {

						console.log(insertResult);

						setTimeout(reporter.bind({}, url, state), state.control.delay);
					});
				});
			});
		});
	});
};

var startStatusWorker = function () {

	var state = {
		control: {
			delay: 1000
		},
		stats: {
			noURL: 0
		}
	};

	var reporter = function (url, state) {

		if (url.length === 0) {
			state.stats.noURL += 1;
		}

		return state;
	};

	start(statusManager, reporter, state);
};

var moniterWorkers = function () {

	// -- todo; maybe factor out worker/moniter into pairs;
	// -- moniter controls execution/termination of worker, may
	// -- request new worker? allows rate adjustment, worker termination,
	// -- and external exception handling. this is quite ad-hoc at the moment.

	startStatusWorker();
};

module.exports = moniterWorkers;
