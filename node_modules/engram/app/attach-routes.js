
"use strict"





var is      = require('is')
var express = require('express')
var log     = require('engram/logging/logger')
var commons = require('engram/commons/commons')




var runBoilerplate = spec => {

	runBoilerplate.precond(spec)

	return function (req, res)	{

	}
}

runBoilerplate.precond = spec => {
	is.always.object(spec)
}





var createWrapper = (spec, fn) => {

	return function ( ) {

		var args = Array.prototype.slice.apply(arguments)

		runBoilerplate(spec).apply({ }, args)

		fn.apply({ }, args)

	}

}






var compileRoute = (app, spec) => {

	compileRoute.precond(app, spec)

	var precondition = (req, res, next) => next( )
	var routes       = [precondition].concat( spec.fns.map(createWrapper.bind({ }, spec)) )

	app[spec.method]( spec.route, routes)
	return app

}

compileRoute.precond = (app, spec) => {

	is.always.object(spec)

	is.always.array(spec.fns)
	is.always.string(spec.route)
	is.always.string(spec.method)

}




var createRouters = specs => {

	var routers = commons.data.objMap(specs.routers, (name, spec) => {
		return express.Router(spec.caseSensitive, spec.mergeParams, spec.strict)
	})

	return routers

}




var mountRouters = (app, routers, specs) => {

	commons.data.objMap(specs.routers, (name, spec) => {
		app.use(spec.mount, routers[name])
	})

	return app

}




var mountRoutes = (routers, specs) => {
	return specs.routes.reduce(mountRoute, routers)
}

var mountRoute = (routers, spec) => {

	var operations = [ ]
		.concat(spec.validators)
		.concat(spec.preprocessors)
		.concat(spec.main)
		.concat(spec.postprocessors)
		.concat(spec.senders)

	if (spec.route) {
		routers[spec.router][spec.method](spec.route, operations)
	} else {
		routers[spec.router][spec.method](operations)
	}

	return routers

}

mountRoute.precond = (routers, spec) => {

	is.always.string(spec.route)
	is.always.string(spec.method)
	is.always.string(spec.router)

	is.always.array(spec.validators)
	is.always.array(spec.preprocessors)
	is.always.array(spec.main)
	is.always.array(spec.senders)

}





var attachRoutes = (app, specs) => {

	attachRoutes.precond(app, specs)

	app       = mountRouters(app, mountRoutes(createRouters(specs), specs), specs)
	app.specs = specs

	return app

}

attachRoutes.precond = (app, specs) => {
	is.always.object(specs)
}




module.exports = attachRoutes
