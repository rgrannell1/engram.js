#!/usr/bin/env node
"use strict";

var log = require("engram/logger");

var Result = require("engram/result").Result;
var Ok = require("engram/result").Ok;
var Err = require("engram/result").Err;

var parseContentType = require("content-type").parse;
var contentTypes = require("engram/content-types");

var requestURL = require("engram/request-url");

var $ = require("cheerio");
var path = require("path");
var URL = require("url");

var headers = {
	headers: {
		"User-Agent": "Mozilla/5.0 (Windows NT 6.0) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.43 Safari/537.31"
	}
};

var extractResourceName = function (uri) {
	return path.basename(URL.parse(uri).pathname);
};

var chooseBestTitle = function (url, titles) {

	var fallback = {
		tag: undefined,
		text: URL.parse(url).hostname,
		"font-size": -1
	};

	return titles.concat([fallback]).filter(function (title) {
		return title.text.length > 0;
	})[0].text;
};

var extractTitle = function (url, callback) {

	requestURL(url, { encoding: null }, function (resResult) {

		resResult.onErr(function (err) {
			callback(Err(err));
		});

		resResult.onOk(function (_ref) {
			var res = _ref.res;
			var body = _ref.body;

			var contentType = res.headers["content-type"] || "text/html";
			var parsed = Result.of(function () {
				return parseContentType(contentType);
			});

			parsed.onErr(function (err) {

				log.warn({
					contentType: contentType,
					message: err.message,
					stack: err.stack,
					url: url
				}, "content-type parsing failed.");
			});

			parsed.onOk(function (contentType) {

				if (contentTypes.isHTML(contentType)) {

					extractTitle.html(url, res, callback);
				} else if (contentTypes.isPDF(contentType)) {

					extractTitle.pdf(url, res, callback);
				} else {

					callback(Ok(extractResourceName(url)));
				}
			});
		});
	});
};

extractTitle.html = function (url, res, callback) {

	var $html = $(res.body.toString("utf8"));

	var extractTagInfo = function (tagName) {

		var $tag = $html.find(tagName);

		if ($tag.length === 0) {
			return [];
		} else if ($tag.length === 1) {

			return [{
				tag: tagName,
				text: $tag.text().trim(),
				"font-size": -1
			}];
		} else {

			return $tag.map(function (_ref) {
				var ith = _ref.ith;
				var elem = _ref.elem;

				return {
					tag: tagName,
					text: $(elem).text().trim(),
					"font-size": -1
				};
			}).get();
		}
	};

	var titles = [];["title", "h1"].forEach(function (tagName) {
		titles = titles.concat(extractTagInfo(tagName));
	});

	callback(Ok(chooseBestTitle(url, titles)));
};

extractTitle.pdf = function (url, res, callback) {};

module.exports = extractTitle;