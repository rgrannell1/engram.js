#!/usr/bin/env node
"use strict";

var log = require("engram/logger");

var Result = require("engram/result").Result;
var Ok = require("engram/result").Ok;
var Err = require("engram/result").Err;

var requestURL = require("engram/request-url");
var database = require("engram/database");

/*
	findUnresolvedURL(callback)

	select the URLS that don't have a status code.
*/

var findUnresolvedURL = function (callback) {

	var sql = "\n\tSELECT * FROM url\n\n\tWHERE url.status_code is NULL\n\n\tLIMIT 1;\n\t";

	database["do"](function (db, callback) {

		db.all(sql, function (err, rows) {
			err ? callback(Err(err)) : callback(Ok(rows));
		});
	}, callback);
};

/*
	updateStatus(url, statusCode, callback)

	set the status code for a URL.

*/

var updateStatus = function (url, statusCode, callback) {

	var sql = "UPDATE url SET status_code=$statusCode WHERE url.url = $url";

	database["do"](function (db, callback) {

		db.run(sql, {
			$url: url,
			$statusCode: statusCode
		});
	}, callback);
};

/*
	saveStatus(recall, state, url)

	request a URL, and save it's to the database.
*/

var saveStatus = function (recall, state, url) {

	url.length === 0 ? recall(undefined, state.control.delay) : requestURL(url[0].url, {}, function (err, res, body) {

		updateStatus(url, res.statusCode, function (result) {
			recall(url, state.control.delay);
		});
	});
};

/*
	save a single unresolved URL to the database before recalling.
*/

var moniter = function (recall, state) {

	findUnresolvedURL(function (urlResult) {

		urlResult.then(saveStatus.bind({}, recall, state));
	});
};

/*
	report whether a url was found or not.
*/

var reporter = function (url, state) {

	if (url.length === 0) {
		state.stats.noURL += 1;
	} else {
		state.stats.urlFound += 1;
	}

	return state;
};

var state = {
	control: {
		delay: 1000
	},
	stats: {
		noURL: 0,
		urlFound: 0
	}
};

module.exports = {
	reporter: reporter,
	moniter: moniter,
	state: state
};