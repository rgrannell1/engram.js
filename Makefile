




.PHONY: clean build install nodemon eslint jshint test wipe start bunstart bundbstart





# -- Node binaries
BIN           = ./node_modules/.bin
ENGRAM_DOCOPT = ./bin/docopt-engram.js





NODE       = node
NODE_FLAGS = --harmony_destructuring


# -- Chrome

CHROME = chromium-browser

# -- Browserify.

BROWSERIFY       = $(BIN)/browserify
BROWSERIFY_FLAGS = -t es6ify

# -- Mocha.

MOCHA       = $(BIN)/mocha
MOCHA_FLAGS =

# -- Babel.

BABEL        = $(BIN)/babel
BABEL_FLAGS  =

# -- Bunyan.
BUNYAN       = bunyan

# -- JS Hint.

JSHINT       = $(BIN)/jshint
JSHINT_FLAGS = --config config/jshint-config.json

# -- eslint

ESLINT       = $(BIN)/eslint
ESLINT_FLAGS = --config config/eslint-config.json

# -- Sass

SASS       = sass
SASS_FLAGS =





# -- PATHS -- #

SERVER_ES5_PATH = node_modules/engram/es5
SERVER_ES6_PATH = node_modules/engram/es6

PUBLIC_ES5_PATH = public/javascript/es5
PUBLIC_ES6_PATH = public/javascript/es6

PUBLIC_LIB_PATH = public/javascript/lib

SERVER_TEST_ES6_PATH = node_modules/engram/test/es6
SERVER_TEST_ES5_PATH = node_modules/engram/test/es5

SASS_PATH = public/sass
CSS_PATH  = public/css

CLIENT_RUNNER_PATH = public-test/runner.html






# -- Engram public code

ENGRAM_PUBLIC_SRC = $(shell find $(PUBLIC_ES6_PATH) -name '*.js')
ENGRAM_PUBLIC_TGT = $(subst es6,es5, $(ENGRAM_PUBLIC_SRC))

ENGRAM_PUBLIC_LIB_SRC = $(shell find $(PUBLIC_LIB_PATH) -name '*.js')
ENGRAM_PUBLIC_LIB_TGT = $(subst lib,es5, $(ENGRAM_PUBLIC_LIB_SRC))

# -- Engram test code

ENGRAM_TEST_SRC   = $(shell find $(SERVER_TEST_ES6_PATH) -name '*.js')
ENGRAM_TEST_TGT   = $(subst es6,es5, $(ENGRAM_TEST_SRC))

# -- Sass source code

ENGRAM_SASS_SRC   = $(shell find $(SASS_PATH) -name '*.sass')
ENGRAM_SASS_TGT   = $(subst sass,css, $(ENGRAM_SASS_SRC))

# -- Browserify bundles
ENGRAM_TEST_BUNDLE_SRC   = public-test/tests/main.js
ENGRAM_TEST_BUNDLE_TGT   = public-test/bundle.js

ENGRAM_PUBLIC_BUNDLE_SRC = $(PUBLIC_ES5_PATH)/main.js
ENGRAM_PUBLIC_BUNDLE_TGT = $(PUBLIC_ES5_PATH)/bundle.js





# -- Every file generated by Make.
ALL_TGT = $(ENGRAM_PUBLIC_TGT) $(ENGRAM_TEST_TGT) $(ENGRAM_SASS_TGT) $(ENGRAM_TEST_BUNDLE_TGT) $(ENGRAM_PUBLIC_LIB_TGT) $(ENGRAM_PUBLIC_BUNDLE_TGT)




# -- build and install npm dependencies.
install: build
	sudo npm install




# -- build all js source code.

build: $(ENGRAM_TEST_TGT) $(ENGRAM_PUBLIC_TGT) $(ENGRAM_SASS_TGT) $(ENGRAM_PUBLIC_TGT) $(ENGRAM_PUBLIC_BUNDLE_TGT) $(ENGRAM_TEST_BUNDLE_TGT) $(ENGRAM_PUBLIC_LIB_TGT)




$(ENGRAM_TEST_TGT): $(ENGRAM_TEST_SRC)

	# Make: building server test code.

	mkdir -p $(@D)
	$(BABEL) $(BABEL_FLAGS) $< --out-file $@





$(ENGRAM_TEST_BUNDLE_TGT): $(ENGRAM_TEST_BUNDLE_SRC)

	# Make: Build public test bundle.

	mkdir -p $(@D)
	$(BROWSERIFY) $< --outfile $@





$(ENGRAM_PUBLIC_TGT): $(ENGRAM_PUBLIC_SRC)

	# Make: Build client source code.

	mkdir -p $(@D)
	$(BABEL) $(BABEL_FLAGS) $< --out-file $@





$(ENGRAM_PUBLIC_LIB_TGT): $(ENGRAM_PUBLIC_LIB_SRC)

	# Make: install library dependencies.

	cp -f $< $@




$(ENGRAM_PUBLIC_BUNDLE_TGT): $(ENGRAM_PUBLIC_BUNDLE_SRC)

	# Make: build client test bundle

	mkdir -p $(@D)
	$(BROWSERIFY) $< --outfile $@



$(ENGRAM_SASS_TGT): $(ENGRAM_SASS_SRC)

	# Make: build public css.

	$(SASS) $(SASS_FLAGS) $< $@





jshint: build

	# Make: JShint

	$(JSHINT) $(JSHINT_FLAGS) $(SERVER_ES6_PATH)

eslint: build

	# Make: ESHint

	$(ESLINT) $(ESLINT_FLAGS) $(SERVER_ES6_PATH)





# -- Run the mocha tests.

test: test-client test-server

	# Make: Run client and server tests.

test-client: build

	# Make: Run client tests.

	$(CHROME) $(CLIENT_RUNNER_PATH) &

test-server: build

	# Make: Run server tests.

	$(MOCHA) $(MOCHA_FLAGS) $(SERVER_TEST_ES5_PATH)





# -- Remove all ES5.

clean:

	# Make: removing compiled code.

	@rm -f $(ALL_TGT)





# -- Remove Engram database or logs.

wipe: build

	# Make: wiping database code and logs.

	$(NODE) $(NODE_FLAGS) $(ENGRAM_DOCOPT) wipe db
	$(NODE) $(NODE_FLAGS) $(ENGRAM_DOCOPT) wipe logs





# -- Start Engram.

start: build
	$(NODE) $(NODE_FLAGS) $(ENGRAM_DOCOPT)

bunstart: build
	$(NODE) $(NODE_FLAGS) $(ENGRAM_DOCOPT) | $(BUNYAN)

bundbstart: build
	$(NODE) $(NODE_FLAGS) $(ENGRAM_DOCOPT) | $(BUNYAN) --level DEBUG
